---
# Source: harbor/templates/chartmuseum/chartmuseum-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-chartmuseum"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
type: Opaque
data:
  CACHE_REDIS_PASSWORD: ""
---
# Source: harbor/templates/clair/clair-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-clair
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
type: Opaque
data:
  config.yaml: Y2xhaXI6CiAgZGF0YWJhc2U6CiAgICB0eXBlOiBwZ3NxbAogICAgb3B0aW9uczoKICAgICAgc291cmNlOiAicG9zdGdyZXM6Ly9wb3N0Z3JlczpjaGFuZ2VpdEBSRUxFQVNFLU5BTUUtaGFyYm9yLWRhdGFiYXNlOjU0MzIvcG9zdGdyZXM/c3NsbW9kZT1kaXNhYmxlIgogICAgICAjIE51bWJlciBvZiBlbGVtZW50cyBrZXB0IGluIHRoZSBjYWNoZQogICAgICAjIFZhbHVlcyB1bmxpa2VseSB0byBjaGFuZ2UgKGUuZy4gbmFtZXNwYWNlcykgYXJlIGNhY2hlZCBpbiBvcmRlciB0byBzYXZlIHByZXZlbnQgbmVlZGxlc3Mgcm91bmR0cmlwcyB0byB0aGUgZGF0YWJhc2UuCiAgICAgIGNhY2hlc2l6ZTogMTYzODQKICBhcGk6CiAgICAjIEFQSSBzZXJ2ZXIgcG9ydAogICAgcG9ydDogNjA2MAogICAgaGVhbHRocG9ydDogNjA2MQogICAgIyBEZWFkbGluZSBiZWZvcmUgYW4gQVBJIHJlcXVlc3Qgd2lsbCByZXNwb25kIHdpdGggYSA1MDMKICAgIHRpbWVvdXQ6IDMwMHMKICB1cGRhdGVyOgogICAgaW50ZXJ2YWw6IDEyaAo=
  redis: cmVkaXM6Ly9SRUxFQVNFLU5BTUUtaGFyYm9yLXJlZGlzOjYzNzkvNA==
  database: cG9zdGdyZXM6Ly9wb3N0Z3JlczpjaGFuZ2VpdEBSRUxFQVNFLU5BTUUtaGFyYm9yLWRhdGFiYXNlOjU0MzIvcG9zdGdyZXM/c3NsbW9kZT1kaXNhYmxl
---
# Source: harbor/templates/core/core-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-core
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  secret: "Tnh3R0dMVXBBVE9rNlVheg=="
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUUwekNDQXJ1Z0F3SUJBZ0lKQVBZL096TE1lVnEyTUEwR0NTcUdTSWIzRFFFQkN3VUFNQUF3SGhjTk1Ua3cKTkRFNE1ESXlOek0zV2hjTk1qa3dOREUxTURJeU56TTNXakFBTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQwpBZzhBTUlJQ0NnS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQWFOUU1FNHdIUVlEVlIwT0JCWUVGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUI4R0ExVWRJd1FZTUJhQQpGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUF3R0ExVWRFd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMCkJRQURnZ0lCQU1Bc0V0VmxFTE13ZHRjaWZIZU9UMGtPbWY1d285SW4vZUZTZ3NjQ3pCTURhUngyQjNxMzZBb1MKSWw3WFdBWnBldmFSN1c3eWVBUkthQXNoQkxoeWdVcUxEMHpXYktsU045SHByZDF3ZHBNMGZmeVBwTjVkeE9ZQQplcjA0eTEyR1JuQ2JNWXFpNGN2enRQNFRpblhxcTJ5SFNZaExiTzlxa0k1Z2JXVnhrUnVJY01Ldml4ZGRsbE5ZClEzb2JKYURESG1vdk0zK2cvRysxWUZndDRxRVMzOFhuSjdCclNzaEhubjVFSVFoMjg2eGZKcml5cksyaEhiTEoKcXowWXVGNkczRFhQZVdHZ1h2ajBIaXBjMGY4VURaa0tray9lR0VJNnZFa3l0eXZvZXBvWkkyWGJBZi9aTXk1bgpLd3VoRW40aGhrRk13V2FTV3AvaDBRZE1DYXhrNEJWU09xbU5WYUxTQjcrRmpzSWo0Q2FzRm90WWl5SjJncFJCCk5mOFFhUzRiejBUbjFlQmJDOGtzaitlM1pXZVgyYjV3Vk1qcWw5alR0MlgxSUNzOEtLZTN2RUJranFUMkFVaTIKNTJUdEt6bTczYVdyei9HUHkvUTJMQ29yM0ZoOUZHVlNCT0JCRFhHeTZNSnBOSEpuWVZIOUVFTkZHT2g4NW9sMQoycEFET0JCNXZBVS9rTEI1TEhQajJrdWUvRk1pSGFObnJTWUlHck1sQlNYMmpqOUVZYTF1dVVIK3BkNE1CajFGCjV1SDhPUmlhUTZodDIrV0hrbHhpYzFSajV5VFlRd1ZsSDcwQ0JPbitxVkVkbzYzeVF3ekFNSktGSXdsR1VRRVgKamlsamdjODZxNGNadFVURnJjd01pZGJrKzhRNitKYkRWZzdIVi8rcG5DK3dudjE5N2t3ZQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQVFLQ0FnRUFrOHE4czRQcnZZYnk3OVVWbFdKTktxY2V5a3dCa3hFMWZqcllPUldRMmhpQWlyeEdWNSs4bERULwprNnVqbTFFV3diNUswSHh4UktrYitQRWExSHFOTkhFNkp4TnBKS0s5ZXhEbFlBUSt4N2RGQnFWci8ybmF6bW80Ck1COE1MWWxtSXp0V1dvU1l3ZThvMm1FZzRxK2J4WXM1SW1kdTdBa2hFN2RKNjNobTIzZ0xNZmVNTGFsUnFvcHUKWEJQd0U1blhQNmFHdVVOSHRHMUs4dFFKRGxaWStMRWJBZU9mUmVOUWhUOU5kUnVrWVNXNTc5dmZLYmxKclN2egp1bGc4OXNWbTNjV0VLNXBCNnJqOXdKYks5NHZvS2Z0VnFiYnVCd1dqZDFhOXBpYktod1ZCZTJMMkZXaHBTWmM1CkYvY29DN25qVGFZVDZ0cjkxeTVWaGhKaElaUUNmL3Z2NFpsNVhoRkhzNVZUWk5iTS9PZnF5RlFMWVhWSk80OEsKRjd0bWF6QUVRUUJRd1ZacUg5QzlOUWR6UEhXbWMzOE9raHRjMXd6YXFuL3JnOSsxc2dBTUQ4aFdDdFFKVWU5NwpiOXltaDVBMFo0UVhLcHlGVDBiK3BYY0QxalJoYTA3VXRrWCsvekxKOUhwQVhjVW16a0crajVDWE5wbnhzSXE1CmZKRmVxM2hCajl3Nm40aCs1ME00VzBGc2U1WW9FVXNjM0IwZno4QmxRQmIrWUpMRkxOSDM0TUg4cDFsMFpEWUoKeWFlMHBzeGxCaWpnNE9QWitXQ0JhK2p0Rlc0TGlXZ0VjeHdnejh3K2hFT0FRcjJhMURjN3c4amQrWTRJSzhVbQpsVFZzNWRicDRtT21QTWxSdi9HTTdrRHVkRnFiTWczWUZ3WGczUWJxdVZxTFp6RXpqVmtDZ2dFQkFQSktaYkNXCllmTGVqa1MvZmtSeVYzVkliNTRtS3dRSG9NV3ViODh0UGdHdVh6anNKeWQ1UVRRNThQcFVqWHJMSG1uOGxTMisKdmlFOEdKeWxLd04xeU1sWnc0MCtrWmhwSFVwQ1d4LzJaS2pBcXZxQTlPT0tvMmZ2NkhkL3dPQW5VNEN0aW9DMQpwcmk3bEtGWVhvUDhEdFFWd0hZdkl6Q1JxRG5oYzRtd0pEcXpUQzl4ZHVJK3N2eHpsNHhIODJmeDBqclBpRlkrCi93T2RYanlmSVBqeWhIQzRqUFRXYmFpcndYUzlkQmpTbDEyOGFJUlQ1ODAveVhFL1NZQXVnZzA1akt0ZzV6UUEKU28xM01UZXpYUkhYZE8wZGkzdEVNSEdSRUVrRnBlVm5uUFF2Q0NlZEswRFYzNmlOd2lXYzhwd2RmTE1WbmVUdApES3daZWRDeCtvLzdldjBDZ2dFQkFPdTQ4REdFSkpKekh4VlI1bVkxSzJBbFp5WXRwVE9XZWhLMXpYNzRKdk0zCll4TjRuZCtaeDVuOXVTUG1tS3pxRjNUVSs0NFJWdGRKSzZlam9GRThkTURUTldhU0xXL1pEbU4xblQwbmp2T24KSVdKbjU5eW5PQ2hXV0taZ1haLzlVcUdSN1B0Nk94U2trZXg5Yy9mWUJzTVgveHVzZFhRaWdlb2dsMGlPWVZGVwpnWElpaUxSTEhwSEpzSy91TnhJaXpqMGhUWVluN3VEN1BSRU53RlJjQ1lmOEoxZVVGYmQ2RHVDVldlUUNLV2dmCk5kMnRTV29pMFZ5bGo0dVVYOEl3MHRqTE5NRDVDUkVKRWs0R1N2NEVEU212VWR2MUxpQktKQ0wybEVjZ29QZUMKb09EMmlDYzVLcWdubVFyYVJpbEZGazhSVlhBOVBXWkdZM0MwYjZUVm1tY0NnZ0VBTlpPMkFPS0FMbENBYlR0YgpGSStrUDA4UlA0dDVINThBTWpac2l3ZWFHbzBRaVduUERxK0ZkNk1JWXBLbjVtdGNBbHZVTVJWb3ZiaW9TSnROCmM2cHNCL3BOZjhKQ044Mm1xSEViN1dseXdNNDZBTUxiWkNXWUZMZThWQkJ2K2lFNEdkQkdQRWZ1NGhLNHZ5VG4KWVpBdlJ6NjRIR280QWRsenRiamc3NlYvbld0Z2dXMDV1TFhjcG01NUtKQVFodisyV1VMakJ3OVBIT0dEb1N3ZgpBbTIrVTU2N3JMaHQ3MHByc1FEajEwbGFKMlF1U0hTMVlYR2xmZUZjdzNlRlVwOVROK0pwdmRvQ29sMmxDSWdsCklIamdaajZPUldmQ3Zwb3hXN1JnQnVadWtxQ0QwUjYwSGRZdGF2eE4zanRpZXBzYXBBODNweE8wSmFwTWdaV1oKcnBVUmtRS0NBUUJPY0V2OUxpdTlUL0dYOXBqa2llelZJWjBoWnk4QjY2RFRlUXZZcEZyUnRDeVQzaDhxdU5GaQp2THRPNXYwSERSNmhFZjVqV0FHOXdldDA3VTM3dWxKZmwraTlLUWRWb0xUWkE5bys3MXJ5V1RzU3MrREQzQ0VqCnl4ZlV4VnhpVUxtZWFpQ2h6aHE2MDhoN0dZUHRoVVU2eGxGdHRBV2hqNW9MZnF6WXlBZzZPTDc2YStOeG0wMmcKMWF5bDNtOFU2ZUFYRjIza3BvVW0rSE5wcVZuR3VKbXpWb1VBNzVZS1orTnJlRWRoU0JiZlB3TjlzSnd0WlVpbAp1N0g0a0hjTTk1SXg4ZXlzQ2pLcUtJcWV6QmxJVGJEVG5qTnZMamNiSjVDKzBhNmx2SVhUMXZRUjUvZUdsYzlNCkJXRTM2MHBOa1YvTEQ4bU9mOUplcGkyUTQzb0RMOUVoQW9JQkFRRFRXSW1meTBLOWdHekEyclB5MTY5bVdZUUsKT2xjbkQzK2hRcTZ4NTFabjFlL3RleEZlVmxoSG40cnJuUmRDRk9BcDQ3dUZrSjJtNzJHQ1ZENzRFd1F1Y0s5eQpBRDVqb3JxZ1ZIcUNLWmRrSGpiMlY2ME16bTZnM3J0TDlXSlhGVkx2TkJiL1FHQjJ2Z0hWT08wenFpcUdaajRlCkV4N2wybS8vNVNFNERMdG43MEo5Q2dHMUh0WENTOGRXckdQTDFwekRuazhWWHRub1h6YjBMQ2hMVUZFZ1pSbWgKY1Y2QUZIRUsySDh3Qkh2aU55ZWhzUlFpRGtsMkFpV09jSk52a3pXNjhjazJuSmpSV3lQWUsxSkwzTkNLcEIzUQpPb2hyUDBmSGNXQVhNVzk3d0ZYWmhSZm5RZkR4eElPbGozTWNZVDBBbGFuWGQwRjROR2MyTnZtcGh4MDQKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
  HARBOR_ADMIN_PASSWORD: "SGFyYm9yMTIzNDU="
  POSTGRESQL_PASSWORD: "Y2hhbmdlaXQ="
  CLAIR_DB_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/database/database-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-database"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
type: Opaque
data:
  POSTGRES_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/ingress/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-ingress"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
type: kubernetes.io/tls
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURORENDQWh5Z0F3SUJBZ0lSQU53UkNMMUVFcE5pU0lpN2RPWkhPV1V3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSmFHRnlZbTl5TFdOaE1CNFhEVEl3TURVeE5qQXpNell4TWxvWERUSXhNRFV4TmpBegpNell4TWxvd0h6RWRNQnNHQTFVRUF4TVVhR0Z5WW05eUxuUXVhMmh6TVRrNU5DNWpiMjB3Z2dFaU1BMEdDU3FHClNJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUREcFhCcHZGS0ZOaVVqbkw1Z2t3bTc2WWtWMC9CTHZKRFkKMzgyN0tqN3pjd0lpUUdibkVKMXhmKzRwU1EvREhVbEdVMklBOEF5c2lBOGZjeUJnNENpVTAyMGQxZ004djU1dQorc0hWc1Z3bWtCTFNqODh5TUV4VkFYWXRIWFNRYlFNK3MzS0w0Uld0VGdubUNmZ1ZXWW5ET3dPbEZWRVZ3QytECmpuWFh5aFM3TnF0VURnNUpscEFRTnU5cWQ2d01HL3RXQk9zTms0Z0ZZRWphZHZPM3dQVWRlLzFVMlJGT1FOYkgKZTVGY0RyWS9xbXh0VStIQTFvTXd3bkNGZlJtUmFvYkt2QmRGY280WUtQNyt2QUpEeFo2cC9EZ0lqWXhTRStXVwpQb1JwdlFLcGgvRUNvZGR2dW5ud0pCRDcvR2VDS2pEdW9qdUg0NFloL3Q0ejRFREYzTVYzQWdNQkFBR2pkakIwCk1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXcKREFZRFZSMFRBUUgvQkFJd0FEQTFCZ05WSFJFRUxqQXNnaFJvWVhKaWIzSXVkQzVyYUhNeE9UazBMbU52YllJVQpibTkwWVhKNUxuUXVhMmh6TVRrNU5DNWpiMjB3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUtTZXVpeVRxRkNXCllJcHplbDRLL0pHU0tNNUtYbW40MHp4M0ZsUHNvU2RNVDVsNWF4cjdpZTNjR0I4aENVU3RTTGp5dDRpVFUrR3UKWUlha0RhdGpxSERnbVk2c1lBYUlxd3pkbTB6QkVDcy9vTzJ4QjdqRDNCclZGVEdxWUhZblYxYytndEt4QkxFOAp4STlrenpwMThYUDlEZnlHenVWaTF6a1pTWnFHRzhVT1hkNWFDTFo4bUx0LytGeGtSV0tGSk02eUhPaDFRUDZ4CmdidzJRQ2U2Sm9tSEZXTElFVDE5UFdoNzFhSWphejFJMkdZRm12MGwyNTFuQlY3Um9oanN1NkgySzQ0TEMvOHcKTGZQOW5GRFowSEJxTE5wckE0VldMRmlSUVFJMlFFN0I2QWZLdEEvR2t5SmtyNEdXWjVqSkYyM0VLc2tzZ0xhMAo1QWpvcEIyYVNyVT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdzZWd2FieFNoVFlsSTV5K1lKTUp1K21KRmRQd1M3eVEyTi9OdXlvKzgzTUNJa0JtCjV4Q2RjWC91S1VrUHd4MUpSbE5pQVBBTXJJZ1BIM01nWU9Bb2xOTnRIZFlEUEwrZWJ2ckIxYkZjSnBBUzBvL1AKTWpCTVZRRjJMUjEwa0cwRFByTnlpK0VWclU0SjVnbjRGVm1Kd3pzRHBSVlJGY0F2ZzQ1MTE4b1V1emFyVkE0TwpTWmFRRURidmFuZXNEQnY3VmdUckRaT0lCV0JJMm5ienQ4RDFIWHY5Vk5rUlRrRFd4M3VSWEE2MlA2cHNiVlBoCndOYURNTUp3aFgwWmtXcUd5cndYUlhLT0dDaisvcndDUThXZXFmdzRDSTJNVWhQbGxqNkVhYjBDcVlmeEFxSFgKYjdwNThDUVErL3huZ2lvdzdxSTdoK09HSWY3ZU0rQkF4ZHpGZHdJREFRQUJBb0lCQUR4LzZsVW9JVFNFVzlPNQpZcjJtZW5vYmE0TE9lUjVTZjFBeFZRTXR1eTI1UU0ycXNLZC9ZZEI1U1FLSFQxSjh1ZTMvVnUwSFRrUUVCdmtvCnRyaCtXTTQ4Mng5QTBOdDJQZDMvdVBVRjFZTXZSa0xLcWIzUlphbGJ2Rm1USkRxTkcxWEdWQU9oWlB5a2h6Y1YKbWh1d0JvUFN1ZnZRcmJSV0s5czRzSVE4UDFEc3VoQU1UOEdnRWxZeVQzOU1QcmJmaHhZdjlFSVBMUWhJSXBpSApCMjE5dDZldEk1S09NaGlsZWoybi9xczlRRm40MFhUeVh4dGhOc3NzTnYwTzcwbG9XVWQrMS9GMi81d1NoVlNRCjJMcFNEdUR4L3RiTTRlc3dDL2oya1JXTDdhb2VvVlJWWGk0MnpxRjZITVdRWnJBVzhrRitCMEdpck9Selp4ekwKaFhpREh4RUNnWUVBOG1HUzZzL2NKL0xERDdqc213QWZiVitINEN1cXlpVWswb1o1K2xmTEZRRHlnYnFwVmowNQpMWk9SVlFXbnYwZnNRYWx1Rld3d2JwZDVPNTByWHozMEdhbTJZL0QvNm5sd0EwWWwzSjE1S0FMRlhIZUJkQ3Q5CkhmcDhqZTB3blIzT0RYRVltYlJoWkZOWFpHNUdPNlBBcXkrRmhBaFIwTkZjN1hna3QzTVBMQ3NDZ1lFQXpxT2cKbTRmZ3p2WWJ3Y0s1MnZlL1BVWDByK2diSVN1VWV6OEdHRkVReEdFWDdrRU8ycUxJZzlrcDdBN245OEsvM2ZDKwpUMVBjakNTaEg1R1FUV2ljK0cvRXdQNXBldUdFMkpDcXkvS2NmQkovMlJzZVUydE90bENxa1ZwMFd2V25nUE56ClZLMURjcUdEdFYveGxzNFlwZWJzdEt4SmpESThmRmJ5VGk0V1NlVUNnWUVBN1FQSlBPQ2g4bGFMdEZZcTJLOVkKREFYOHdwTXc0WmRNMktrem9rQXprSWhxbTcxQ1ZkaHNqMHJjTlAzZ3VVWEZtN2Zvcy80bHBoOXRKNFJib3pqYgorRFJpN0h3QVpQTDNPOXhlcmNzM2JJNjVHK0Nvc0ViT2hJQXJTRVlHNGIwQmYxZDJyT2NjelpSSnd5V3FmQ3QyCi9tN3I2dDZQMHRqSVBGYmQ0SjRjMmgwQ2dZQXBEdjQwcVRVVUtuYXRjMkcyam8ralB5azFZcXN4VmhWMHY3c1kKVGRORkVmM05TNFFHRVY1Q1JINDk5MkJFTEtBdkcwelZPbGFTU2h6eHh0eWpaT3Y3dVVtaEIyd3lER2wzRnBlNQpXb1daYVp1WnFmZkduNFhPV0F6c1FNcnAzL0hlZjRFbERDQmd3Sk1KRVAxUjk3V1NFV1pySitpZFFNWWY5cTdDCnRnbWJ1UUtCZ0E5V1JISWtOUGllcDFJa25rRWk5SFhaRXhVYTExVUdJUFFEYnZNRG1wV29pRUl2OE9NUEM1dUMKNlB1bHVtNzJURGNjSmxjTmxSNnd0NzN5SXZjVWdNWHVuQWU0VDRGTnNFWnN6bkgyeDg3Rm9tNlM1RFE2L3RiMQpVcW1mb214VFA2RGRiaU42NWZBa0ZvVTk1b1huMHBUbk0rbk5Ua3pjditaL1RUZkVSUjdxCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM5RENDQWR5Z0F3SUJBZ0lRSnFJV3E4WUdXOWtreUpwL3g4VTcxVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsb1lYSmliM0l0WTJFd0hoY05NakF3TlRFMk1ETXpOakV5V2hjTk1qRXdOVEUyTURNegpOakV5V2pBVU1SSXdFQVlEVlFRREV3bG9ZWEppYjNJdFkyRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRREFxWDB6NEtCSDlxY3Btd1ZURE53N3hnVSszaG9EcWRtOC9WK2lSUEtueEQxbWcyMUwKM3JQTy9ON1RldXlZblR2RlZWU1g5YmlZUDUwR2s4b1FTOXh1T3QrYlNieVFJSjh4SHNJajRGbWV6dWlLSVc3NQpxWndHOUlKUUJSaSt3Qit0aUFHMDAxcUdoZXZ1UXdvQVkzVWM3TSt2TXFyQ2g1Slo4a3dndVZVSXpwVjdKSmdYCmI0cFhPZHVlUjNFYUNiRXpKaTBpS1h5U2ZieTdWSFoyZEVET2dJVXFMVGpoSSs4WDlOdVBva3FjUk9DMHQ2QXYKQ1Z4cTVCN21ZclpnbFA2eC95a0xwbEtQL0Z4MGZpeUc4YURCbUFxUUx6dlpWaS83V0tlSHZuczJZWGYvTDcxdwpSRWk1YVpKTE1yTXRudDJGNG9QWENpcjVFY2NXZ3phT1BRSlhBZ01CQUFHalFqQkFNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFnUDJieGF1WUFIeFR2aXBSZG85eWVmVzJBcTVQdVpiego4MVpJdEdFT1V1cHJSQ1FVSWJ4OTdHV1A0SGtieXJZMXZiTTdqU0VxajkwTDRsNUk4N3JtVXJSZjhVWGJWQkhZCkF4UlNrcGkzb0lwYTRhT1ZnczE2cFhrK2puTVBoUmFrZXB6YXBzZFB1MmRRVXVGejdhOXJzVGhVYTdoR3Q5UWEKSk1UN09oRFNrNnlhcVZKbllDdGhmOGVrMldHcUZEVDJWSElnR1Y1WWQ2dVZWR3hxWGo3aVd0T3p0eWtaRnFyMgpMOExVNDkzTHdVRTlWRUwwblIxVWpRRTBBcjgyVjJQSFB1TlJLSmNmZmRtaXpMVnd1U0dLSDRWVFp2Ukt3NVVEClliUlpxNFUxSWRSZ2tVZHNnZEMyOU9STTlLMzF2RzE3RmdIa1hMT1ZvY0dxdENGU3Zkc2pQdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
---
# Source: harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secret: "MVVhNHZpYmZDZ0Z6dm52Vg=="
---
# Source: harbor/templates/notary/notary-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-notary-server
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: notary
type: Opaque
data:
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURBekNDQWV1Z0F3SUJBZ0lSQUpHQWN2YUZISHYzMng0bENCYkJKSTB3RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUWFHRnlZbTl5TFc1dmRHRnllUzFqWVRBZUZ3MHlNREExTVRZd016TTJNVEZhRncweQpNVEExTVRZd016TTJNVEZhTUJzeEdUQVhCZ05WQkFNVEVHaGhjbUp2Y2kxdWIzUmhjbmt0WTJFd2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEbitZMHRvNGRXRnFJM29naHlPSUFCVGhRZ1NRczUKYlA3azZHdFpGZmN5VGloUlNZcmxnMzRtbHpKVXZFV1JPT2lpOEt2Y3ltdWFvSzM3YXllM2NuYWdLYkdybVRlQQpaTm0yUzhjOTc3R2p0NndmazNNOUFycDh5b1JMcERLdWMvNzdOUkxCdVJsMzc4Y2hMdElSdUtMTHhmL0x3UFJyCjFXS1BvNHVucjFDMGZlNEhWM2hEL1k3ZUVNY29wNXh4clFnRG5JOEZ0TFhBOGJZZDhUS0tzRlVSRGRxcmNpbmcKWUo3dXplY0g5YVRXQlVrbzRyREovOXBhdHVtQ0sycmxIcjNTKzRZcmtObUZVbVdQd0ZsOWVIRG5Rdjdwc09xUApOWU9RRVhMM1R2ZEJLY0c4MHlzejUxTFpEYXg1WGxZZTVCSEkvOW1QclJ6cWZGVityYm0wNmpFOUFnTUJBQUdqClFqQkFNQTRHQTFVZER3RUIvd1FFQXdJQ3BEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUgKQXdJd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQUQ5M3YxSXV4Zk1lNQpaWlN2L3B6N0ttendOWDFMaEtKVVk3RUt4UDI5czZoOERWMU1NY3I4ZTdQcnZZMlZYb0N3S2I4UStCYWcyb0VSCmRNSEFtQ2hhNUJ1a1VnWEVlZjgrUTdjWmNQcm0rN0gyTHhQZThHalE5ZFk3QnJTdmJNLytVNURUUUhzVmo1bm0KM3h0UWZyVEhVY3FkT0VNQmVtUGw3dXEwOUtsVkxIdVcxSFV6ZVhyNjRJZHp2S2ZGTWVjNjd5VnFVa1FVSG9VRgp4ZjZKWG5kSHUxQjlrbHFna21UYWU5U2JlZ0o4WW1MWUpnNVZvenlaWUVvMjRhaG9vMWFrcDBCOVhybkVVaURiCkMxQ2hETzNQT2NrMWd4K2xXUU9jR0tGdW43Q2hwRnVkVWN5UVB2Y0ZmcGJTbDdLSXZVbTl6Z0VTWExHdzZndEkKamJCLzgrNTVqZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lRQ1c0ZU5tT25FR1B0cEpjRkREVmtrakFOQmdrcWhraUc5dzBCQVFzRkFEQWIKTVJrd0Z3WURWUVFERXhCb1lYSmliM0l0Ym05MFlYSjVMV05oTUI0WERUSXdNRFV4TmpBek16WXhNbG9YRFRJeApNRFV4TmpBek16WXhNbG93TERFcU1DZ0dBMVVFQXhNaFVrVk1SVUZUUlMxT1FVMUZMV2hoY21KdmNpMXViM1JoCmNua3RjMmxuYm1WeU1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBMWRNRXdJNWMKWTlxSGY4TG1McjB6Q3BncGJ5eFAzWmVNYmU2ZTVrL2hMQkRXcVhtNk5hVERTSFplRjFpeVNzQTFVaHJmVGpGVApHNHl2aS9oN2JoZ3dLOGc1T05ENDJEVUxIU0R5SjdYckdkNGVndVlzM1IwdklZc1ZWRHdhNE0wa2VXU29iM0tZCllTbC9PRHR5S3k4QmtTbktWN3BZdHVhTDZ0S3ZIM3J3Q3VqeGk4WU9FSXNyZzUrQTJtNnZVbFY3c3J5ZDArczQKd2FhVGUxRUVCT0cwVWltRi9HaUNqZll1SEJLQ29GdzZ1R1EyRTIyZFVmZEt0cXRRNE4zaXByTzBxUTJ3QzNLSgphWmo4TEZpTlM0RGFpenp3R21jM1NZT1RIM1BwZFlBc05lSUsvcER5dVZZT2JDOG9ISFVpR1l2MitkV3dlbXp4Cm9CM3NFWHdBaW1Oamh3SURBUUFCb3o4d1BUQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUkKS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUh3WHV5R1FGZWlWYXcwNGd3dEhZS2p4WWhLSzlRS0JlLzM4ZDhaTEc4Mi9Vd0h5ZnZ0eW4wcXBzdTBPCmhrZThQVG05V0dSUmdOOVlWTDYwSGZMYmNveE9obUQwVHBIcmhLMlUrQjVTL1NUb0NmTHByeHRNUkcxK2lBMUcKYUVEcUhEQXBqUHYxTU1OQVFrby8vem1xdWdvdHErZEpnMS92dnFXamxZL1hQZjVTRE9RQ0prOFYrVFNxbU1MZApnU21lOTdBS1ZHRUZERFJhamMyTklIYXZkd2RvM095NzJyZlM5OXY4QVZFOTh5VzNCN3g3UFBqNXBUM3pMcDV1CkExb1ZBQTBYM2Y4ZDZYMWZWOTU1bjJRSUs2b3ZVMmxFZWZERUZuSHV4Wi9wcEN1QjlmREpCZFVMZ2FFSlNKVTgKb0YxYTk3YU1iVkJiSlBtNnJLOHE0N3BVNWdJPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMWRNRXdJNWNZOXFIZjhMbUxyMHpDcGdwYnl4UDNaZU1iZTZlNWsvaExCRFdxWG02Ck5hVERTSFplRjFpeVNzQTFVaHJmVGpGVEc0eXZpL2g3Ymhnd0s4ZzVPTkQ0MkRVTEhTRHlKN1hyR2Q0ZWd1WXMKM1IwdklZc1ZWRHdhNE0wa2VXU29iM0tZWVNsL09EdHlLeThCa1NuS1Y3cFl0dWFMNnRLdkgzcndDdWp4aThZTwpFSXNyZzUrQTJtNnZVbFY3c3J5ZDArczR3YWFUZTFFRUJPRzBVaW1GL0dpQ2pmWXVIQktDb0Z3NnVHUTJFMjJkClVmZEt0cXRRNE4zaXByTzBxUTJ3QzNLSmFaajhMRmlOUzREYWl6endHbWMzU1lPVEgzUHBkWUFzTmVJSy9wRHkKdVZZT2JDOG9ISFVpR1l2MitkV3dlbXp4b0Izc0VYd0FpbU5qaHdJREFRQUJBb0lCQUJwSDJHS3VYSzZ0TWxCQwpyVFg3YlNXVk5DcUU0TUFVbTE3N29DNGdqVVYwUUY0T0p4UG16MVc5cnF6aDZ2QURGY3Frb09Pa2JsbUpmaDRQCkNXU3J0bWY3TVFWSnNmd284TmZBcitLdm1salFreUYxbHZnS1dUdWZNNXpwMGtmbER1R1l2SmNPRjZxQmhqQnMKSmdrbXV1T1RwbG9IL2xWa21yZmU4MFZFUC9Lbkd5SmxDdW4zWmRZUmw1R2JiWTVEbjFGbEVJZUltR01OakY5cApXZHNHdmFRMko2K0hkZlJZQ0ZTMUZHd3lmRXp3bmQzc0N5U0tSeVUyd0dINk0yQitlTWFmbDZZNFBUZzZ3c21vCm5LeTUwdHlhNHdyNFc2RDA3aXVQdEhFSDZRN0FyVHZDNG5KVC9KQUNyb21vNHhPOXdtN3Z0K085RTFlWTl2czUKdk9nNTJSa0NnWUVBLy9RTTU2SWRIVGdxaVcrWiszVlJFaG5BMU13VnlyVTVjUjBxbW5Vc2dXUytDZmlkU1phcQozbHJwMzk4T3kzWWx0dm5CRTd6amFTUjl5Y0dmcENCY2FWQTdNcDM1akwxZTFMRE9TWnRJbXd5SnFYNXZGRCtVCk9TNEZkeThUb1krMW40RmFPQzFYWUNWK1N2S08xb2thMXUrSStvQmRLaWx2THNLNTRNSHowMlVDZ1lFQTFkMEEKVkxSM1orZGRBOFlqcElYTm1rbExqeXRVWmtYejhCYzQ5dG1Vc20reTNuUEJZdnpDMGdEZUdxQkl6M3JKT3BnUwpaU1JtSENEeGthWjhscG5jRWFEMFhFRHpSS3k4ZlZmRjhJRmp4UjlkSUpwbU5YNXRuWDYwUlM5L2syNTREMitiCmlIUFR2MWZJRkNxbUd0cmhIaHg1VGtxQWNTZktoNmVJYjc4UmFuc0NnWUVBNXVOUmpOWlpxeFVTa2g0QmFxdSsKc1RSWUZkM3dQb2JTUlc2SkV3Sm1YbWJ4WTI5SSs2d1ZnVFhEeWJhZTB2MUdNbFFFVHZqU3IvTkNJWEV2d0UrTQo3VmQ1djBSd2Evd2NBb05uNDFCWDQ3NGdwS3d3S2JUYzBlUG8vRVdVVU9haGNUeXZsUU9aMFZxaEhaekhLMUpNCnl0MFQxTjFjclg3cEUrYUc1UEF4TWwwQ2dZQi9kbHlBSDU4YkdsWGhyZklJV0ljVjhhRkxEelFhVUk3M0JhQTUKMzZ3MFBVYUtOc3VIeDhZRmkrYlVUN3VWalVUcDIwRDdieG84b1pYWWpUV3NQTDlnOG1FeHFyUlN0ZkVSYzRMUgp1UXhSckVQQTdzVUVGUG9YNkRCaEc5SVplTG10MllNRmJLTkRZM29vS3RNZEpsOE5wMExWV3FuNnh4QjZrV3RMCnpzRCtpUUtCZ1FEUlBOcVhTY09ibWRoVUZqZm9kSDVobU9ESWFJd1pPVzdhNG9pRCsyMUhrVDErbldaNHdiUVMKQlMwcXFSSUFLWW5aNlV3UVpibjhobS9NTDBFa05aa3QvMDZDZkJNZWxtUW04Vi8wdDlaalhoWkQ3SGVZb3p4RApSdDlxckhOcU1rcFZEZ2gxMy9qd2Q2VnhSdzFaNzE4NVg0YmZMT2M0NnJxUHNjZGVlV1NwbWc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  server.json: ewogICJzZXJ2ZXIiOiB7CiAgICAiaHR0cF9hZGRyIjogIjo0NDQzIgogIH0sCiAgInRydXN0X3NlcnZpY2UiOiB7CiAgICAidHlwZSI6ICJyZW1vdGUiLAogICAgImhvc3RuYW1lIjogIlJFTEVBU0UtTkFNRS1oYXJib3Itbm90YXJ5LXNpZ25lciIsCiAgICAicG9ydCI6ICI3ODk5IiwKICAgICJ0bHNfY2FfZmlsZSI6ICIvZXRjL3NzbC9ub3RhcnkvY2EuY3J0IiwKICAgICJrZXlfYWxnb3JpdGhtIjogImVjZHNhIgogIH0sCiAgImxvZ2dpbmciOiB7CiAgICAibGV2ZWwiOiAiaW5mbyIKICB9LAogICJzdG9yYWdlIjogewogICAgImJhY2tlbmQiOiAicG9zdGdyZXMiLAogICAgImRiX3VybCI6ICJwb3N0Z3JlczovL3Bvc3RncmVzOmNoYW5nZWl0QFJFTEVBU0UtTkFNRS1oYXJib3ItZGF0YWJhc2U6NTQzMi9ub3RhcnlzZXJ2ZXI/c3NsbW9kZT1kaXNhYmxlIgogIH0sCiAgImF1dGgiOiB7CiAgICAidHlwZSI6ICJ0b2tlbiIsCiAgICAib3B0aW9ucyI6IHsKICAgICAgInJlYWxtIjogImh0dHBzOi8vaGFyYm9yLnQua2hzMTk5NC5jb206Mjg0NDMvc2VydmljZS90b2tlbiIsCiAgICAgICJzZXJ2aWNlIjogImhhcmJvci1ub3RhcnkiLAogICAgICAiaXNzdWVyIjogImhhcmJvci10b2tlbi1pc3N1ZXIiLAogICAgICAicm9vdGNlcnRidW5kbGUiOiAiL3Jvb3QuY3J0IgogICAgfQogIH0KfQ==
  signer.json: ewogICJzZXJ2ZXIiOiB7CiAgICAiZ3JwY19hZGRyIjogIjo3ODk5IiwKICAgICJ0bHNfY2VydF9maWxlIjogIi9ldGMvc3NsL25vdGFyeS90bHMuY3J0IiwKICAgICJ0bHNfa2V5X2ZpbGUiOiAiL2V0Yy9zc2wvbm90YXJ5L3Rscy5rZXkiCiAgfSwKICAibG9nZ2luZyI6IHsKICAgICJsZXZlbCI6ICJpbmZvIgogIH0sCiAgInN0b3JhZ2UiOiB7CiAgICAiYmFja2VuZCI6ICJwb3N0Z3JlcyIsCiAgICAiZGJfdXJsIjogInBvc3RncmVzOi8vcG9zdGdyZXM6Y2hhbmdlaXRAUkVMRUFTRS1OQU1FLWhhcmJvci1kYXRhYmFzZTo1NDMyL25vdGFyeXNpZ25lcj9zc2xtb2RlPWRpc2FibGUiLAogICAgImRlZmF1bHRfYWxpYXMiOiAiZGVmYXVsdGFsaWFzIgogIH0KfQ==
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-registry"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTTP_SECRET: "NFROa3VBTTJ1RFBZdWdsMA=="
  REGISTRY_REDIS_PASSWORD: ""
---
# Source: harbor/templates/chartmuseum/chartmuseum-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-chartmuseum"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
data:
  PORT: "9999"
  CACHE: "redis"
  CACHE_REDIS_ADDR: "harbor-redis:6379"
  CACHE_REDIS_DB: "3"
  BASIC_AUTH_USER: "chart_controller"
  DEPTH: "1"
  DEBUG: "false"
  LOG_JSON: "true"
  DISABLE_METRICS: "false"
  DISABLE_API: "false"
  DISABLE_STATEFILES: "false"
  ALLOW_OVERWRITE: "true"
  #CHART_URL: https://harbor.t.khs1994.com:28443/chartrepo
  AUTH_ANONYMOUS_GET: "false"
  TLS_CERT: ""
  TLS_KEY: ""
  CONTEXT_PATH: ""
  INDEX_LIMIT: "0"
  MAX_STORAGE_OBJECTS: "0"
  MAX_UPLOAD_SIZE: "20971520"
  CHART_POST_FORM_FIELD_NAME: "chart"
  PROV_POST_FORM_FIELD_NAME: "prov"
  STORAGE: "local"
  STORAGE_LOCAL_ROOTDIR: "/chart_storage"
---
# Source: harbor/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-core
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
data:
  app.conf: |+
    appname = Harbor
    runmode = dev
    enablegzip = true

    [dev]
    httpport = 8080
    EnableXSRF = true
    XSRFKey = b74KlP2NGEc5GCHVAprleNMQjliImTSWs55O3Grh
    XSRFExpire = 3600
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "harbor-database"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  POSTGRESQL_SSLMODE: "disable"
  POSTGRESQL_MAX_IDLE_CONNS: "50"
  POSTGRESQL_MAX_OPEN_CONNS: "100"
  EXT_ENDPOINT: "https://harbor.t.khs1994.com:28443"
  CORE_URL: "http://harbor-core"
  JOBSERVICE_URL: "http://harbor-jobservice"
  REGISTRY_URL: "http://harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://harbor-core/service/token"
  WITH_NOTARY: "true"
  NOTARY_URL: "http://harbor-notary-server:4443"
  CFG_EXPIRATION: "5"
  ADMIRAL_URL: "NA"
  WITH_CLAIR: "true"
  CLAIR_DB_HOST: "harbor-database"
  CLAIR_DB_PORT: "5432"
  CLAIR_DB_USERNAME: "postgres"
  CLAIR_DB: "postgres"
  CLAIR_DB_SSLMODE: "disable"
  CLAIR_URL: "http://harbor-clair:6060"
  CLAIR_ADAPTER_URL: "http://harbor-clair:8080"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  WITH_CHARTMUSEUM: "true"
  CHART_REPOSITORY_URL: "http://harbor-chartmuseum"
  LOG_LEVEL: "info"
  CONFIG_PATH: "/etc/core/app.conf"
  SYNC_REGISTRY: "false"
  CHART_CACHE_DRIVER: "redis"
  _REDIS_URL: "harbor-redis:6379,100,"
  _REDIS_URL_REG: "redis://harbor-redis:6379/2"
  PORTAL_URL: "http://harbor-portal"
  REGISTRYCTL_URL: "http://harbor-registry:8080"
  CLAIR_HEALTH_CHECK_SERVER_URL: "http://harbor-clair:6061"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-clair,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,127.0.0.1,localhost,.local,.internal"
---
# Source: harbor/templates/jobservice/jobservice-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
    job_loggers:
      - name: "FILE"
        level: INFO
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: INFO
---
# Source: harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-registry"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: "harbor-redis:6379"
      db: 2
    http:
      relativeurls: false
      addr: :5000
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      token:
        issuer: harbor-token-issuer
        realm: "https://harbor.t.khs1994.com:28443/service/token"
        rootcertbundle: /etc/registry/root.crt
        service: harbor-registry
    validation:
      disabled: true
    notifications:
      endpoints:
        - name: harbor
          disabled: false
          url: http://harbor-core/service/notifications
          timeout: 3000ms
          threshold: 5
          backoff: 1s
          ignoredmediatypes:
            - application/vnd.docker.image.rootfs.diff.tar.gzip
            - application/vnd.docker.image.rootfs.foreign.diff.tar.gzip
            - application/vnd.oci.image.layer.v1.tar
            - application/vnd.oci.image.layer.v1.tar+gzip
            - application/vnd.oci.image.layer.v1.tar+zstd
            - application/vnd.oci.image.layer.nondistributable.v1.tar
            - application/vnd.oci.image.layer.nondistributable.v1.tar+gzip
            - application/vnd.oci.image.layer.nondistributable.v1.tar+zstd
            - application/octet-stream
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: info
---
# Source: harbor/templates/chartmuseum/chartmuseum-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: harbor-chartmuseum
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: chartmuseum
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  selector:
    matchLabels:
      app: harbor
      component: chartmuseum
---
# Source: harbor/templates/jobservice/jobservice-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: harbor-jobservice
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  selector:
    matchLabels:
      app: harbor
      component: jobservice
---
# Source: harbor/templates/registry/registry-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: harbor-registry
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: registry
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  selector:
    matchLabels:
      app: harbor
      component: registry
---
# Source: harbor/templates/chartmuseum/chartmuseum-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-chartmuseum"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 9999
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: chartmuseum
---
# Source: harbor/templates/clair/clair-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-clair"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: adapter
      port: 8080
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: clair
---
# Source: harbor/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-core
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: core
---
# Source: harbor/templates/database/database-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-database"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 5432
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: database
---
# Source: harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: jobservice
---
# Source: harbor/templates/notary/notary-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-notary-server
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
  - port: 4443
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: notary-server
---
# Source: harbor/templates/notary/notary-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-notary-signer
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
  - port: 7899
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: notary-signer
---
# Source: harbor/templates/portal/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-portal"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: portal
---
# Source: harbor/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-redis
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 6379
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: redis
---
# Source: harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-registry"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: registry
      port: 5000
    - name: controller
      port: 8080
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: registry
---
# Source: harbor/templates/chartmuseum/chartmuseum-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-chartmuseum"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: chartmuseum
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: chartmuseum
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: chartmuseum
      annotations:
        checksum/configmap: 07b32974c06624241d7cff3b3e2b360db96216a5e745a47196881bd90f0c23bd
        checksum/secret: eedbdc2cec3014448f8a4a11a2e66285ed85bf31db6653175f19c39376e852af
        checksum/secret-core: 09c191e5d471b6c6250931480d72ae684b27ea3d5f8a8ebf724b36095463e32e
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: chartmuseum
        image: goharbor/chartmuseum-photon:v1.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 9999
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 9999
          initialDelaySeconds: 1
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "harbor-chartmuseum"
        - secretRef:
            name: "harbor-chartmuseum"
        env:
          - name: BASIC_AUTH_PASS
            valueFrom:
              secretKeyRef:
                name: harbor-core
                key: secret
        ports:
        - containerPort: 9999
        volumeMounts:
        - name: chartmuseum-data
          mountPath: /chart_storage
          subPath:
      volumes:
      - name: chartmuseum-data
        persistentVolumeClaim:
          claimName: harbor-chartmuseum
---
# Source: harbor/templates/clair/clair-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-clair
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: clair
spec:
  replicas: 1
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: clair
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: clair
      annotations:
        checksum/secret: ec13977f3d8ba8afd6f205d8b996378d43e4f9cef8ff01823c3ba862cbab9ef4
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: clair
        image: goharbor/clair-photon:v1.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 6061
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 6061
          initialDelaySeconds: 30
          periodSeconds: 10
        args: ["-log-level", "info"]
        env:
        - name: HTTP_PROXY
          value: ""
        - name: HTTPS_PROXY
          value: ""
        - name: NO_PROXY
          value: "harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-clair,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,127.0.0.1,localhost,.local,.internal"
        ports:
        - containerPort: 6060
        volumeMounts:
        - name: config
          mountPath: /etc/clair/config.yaml
          subPath: config.yaml
      - name: adapter
        image: goharbor/clair-adapter-photon:v1.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /probe/healthy
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /probe/ready
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        env:
        - name: SCANNER_CLAIR_URL
          # To avoid a pod cannot reach itself via service IP when the clusters disable hairpin
          value: "http://127.0.0.1:6060"
        - name: SCANNER_STORE_REDIS_URL
          valueFrom:
              secretKeyRef:
                name: harbor-clair
                key: redis
        - name: SCANNER_CLAIR_DATABASE_URL
          valueFrom:
              secretKeyRef:
                name: harbor-clair
                key: database
        - name: SCANNER_LOG_LEVEL
          value: "info"
        ports:
        - containerPort: 8080
      volumes:
      - name: config
        secret:
          secretName: "harbor-clair"
---
# Source: harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-core
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: core
spec:
  replicas: 1
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: core
  template:
    metadata:
      labels:
        release: RELEASE-NAME
        app: "harbor"
        component: core
      annotations:
        checksum/configmap: 229c51fa32aabec8ccb91130fda70ed0b10a795ba5b3305df555b5db5eb5c39b
        checksum/secret: d28faf927ad88f4c63799fce6490505506ef135a3f2002864089ed9f5eaada90
        checksum/secret-jobservice: 4e1dcb6bd3d252a48de0563d94b61780c07551c6e16eacb615b651ad0826a725
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: core
        image: goharbor/harbor-core:v1.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/ping
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/ping
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "harbor-core"
        - secretRef:
            name: "harbor-core"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "harbor-jobservice"
                key: secret
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/core/app.conf
          subPath: app.conf
        - name: secret-key
          mountPath: /etc/core/key
          subPath: key
        - name: token-service-private-key
          mountPath: /etc/core/private_key.pem
          subPath: tls.key
        - name: ca-download
          mountPath: /etc/core/ca
        - name: psc
          mountPath: /etc/core/token
      volumes:
      - name: config
        configMap:
          name: harbor-core
          items:
            - key: app.conf
              path: app.conf
      - name: secret-key
        secret:
          secretName: harbor-core
          items:
            - key: secretKey
              path: key
      - name: token-service-private-key
        secret:
          secretName: harbor-core
      - name: ca-download
        secret:
          secretName: "harbor-ingress"
      - name: psc
        emptyDir: {}
---
# Source: harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: jobservice
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: jobservice
      annotations:
        checksum/configmap: c38b4cb4e408a754c9c9b533f2decc68bf6b0cab176a3b3559612d64383a1e62
        checksum/secret: d31308b88bd2d65b74408e6a335e4db1c1972730cb197676835ca27ae467c954
        checksum/secret-core: bc41dd41cd3c533e8ca3f29a0989e8d6819e1498fb39450f67eb555d32717db8
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: jobservice
        image: goharbor/harbor-jobservice:v1.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v1/stats
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/stats
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "harbor-jobservice"
                key: secret
          - name: CORE_URL
            value: "http://harbor-core"
          - name: REGISTRY_CONTROLLER_URL
            value: "http://harbor-registry:8080"
          - name: LOG_LEVEL
            value: debug
          - name: HTTP_PROXY
            value: ""
          - name: HTTPS_PROXY
            value: ""
          - name: NO_PROXY
            value: "harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-clair,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,127.0.0.1,localhost,.local,.internal"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: jobservice-config
          mountPath: /etc/jobservice/config.yml
          subPath: config.yml
        - name: job-logs
          mountPath: /var/log/jobs
          subPath:
      volumes:
      - name: jobservice-config
        configMap:
          name: "harbor-jobservice"
      - name: job-logs
        persistentVolumeClaim:
          claimName: harbor-jobservice
---
# Source: harbor/templates/notary/notary-server.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-notary-server
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: notary-server
spec:
  replicas: 1
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: notary-server
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: notary-server
      annotations:
        checksum/secret: 124336c4b15125794219d8f639ac0460b298b0779ac04b8963b6d7a72b8744cf
        checksum/secret-core: c7aef0fa45326ff5a13e6c5cbca7c322a045944d1ff42514da52bdaf0aabef6c
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: notary-server
        image: goharbor/notary-server-photon:v1.10.2
        imagePullPolicy: IfNotPresent
        env:
        - name: MIGRATIONS_PATH
          value: migrations/server/postgresql
        - name: DB_URL
          value: postgres://postgres:changeit@harbor-database:5432/notaryserver?sslmode=disable
        volumeMounts:
        - name: config
          mountPath: /etc/notary/server-config.postgres.json
          subPath: server.json
        - name: token-service-certificate
          mountPath: /root.crt
          subPath: tls.crt
        - name: signer-certificate
          mountPath: /etc/ssl/notary/ca.crt
          subPath: ca.crt
      volumes:
      - name: config
        secret:
          secretName: "harbor-notary-server"
      - name: token-service-certificate
        secret:
          secretName: harbor-core
      - name: signer-certificate
        secret:
          secretName: harbor-notary-server
---
# Source: harbor/templates/notary/notary-signer.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-notary-signer
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: notary-signer
spec:
  replicas: 1
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: notary-signer
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: notary-signer
      annotations:
        checksum/secret: 76a902d4f5fa223405c66453d9a47001faf5be0b29c3c771182933c524b84937
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: notary-signer
        image: goharbor/notary-signer-photon:v1.10.2
        imagePullPolicy: IfNotPresent
        env:
        - name: MIGRATIONS_PATH
          value: migrations/signer/postgresql
        - name: DB_URL
          value: postgres://postgres:changeit@harbor-database:5432/notarysigner?sslmode=disable
        - name: NOTARY_SIGNER_DEFAULTALIAS
          value: defaultalias
        volumeMounts:
        - name: config
          mountPath: /etc/notary/signer-config.postgres.json
          subPath: signer.json
        - name: signer-certificate
          mountPath: /etc/ssl/notary/tls.crt
          subPath: tls.crt
        - name: signer-certificate
          mountPath: /etc/ssl/notary/tls.key
          subPath: tls.key
      volumes:
      - name: config
        secret:
          secretName: "harbor-notary-server"
      - name: signer-certificate
        secret:
          secretName: harbor-notary-server
---
# Source: harbor/templates/portal/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-portal"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: portal
spec:
  replicas: 1
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: portal
  template:
    metadata:
      labels:
        release: RELEASE-NAME
        app: "harbor"
        component: portal
      annotations:
    spec:
      containers:
      - name: portal
        image: goharbor/harbor-portal:v1.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        ports:
        - containerPort: 8080
---
# Source: harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-registry"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: registry
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: registry
      annotations:
        checksum/configmap: e864d220d605c7ac9ba216afab3fb47161e36f8b049c8527cd743d5e049fd0a3
        checksum/secret: 903879e1431df261cd1526198c923136e9aa354e7d52f170a81f2f9f7839021a
        checksum/secret-jobservice: 016d244199c99bdee168ec56f4ed07154136288d33b900edab234981c4329b66
        checksum/secret-core: 5c41a0e1656946615712a9b6288bb99f4f05f340d8a5e092c8a1ed89fef65973
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: registry
        image: goharbor/registry-photon:v1.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "harbor-registry"
        ports:
        - containerPort: 5000
        - containerPort: 5001
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath:
        - name: registry-root-certificate
          mountPath: /etc/registry/root.crt
          subPath: tls.crt
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
      - name: registryctl
        image: goharbor/harbor-registryctl:v1.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "harbor-registry"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-jobservice
                key: secret
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath:
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
        - name: registry-config
          mountPath: /etc/registryctl/config.yml
          subPath: ctl-config.yml
      volumes:
      - name: registry-root-certificate
        secret:
          secretName: harbor-core
      - name: registry-config
        configMap:
          name: "harbor-registry"
      - name: registry-data
        persistentVolumeClaim:
          claimName: harbor-registry
---
# Source: harbor/templates/database/database-ss.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "harbor-database"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: database
spec:
  replicas: 1
  serviceName: "harbor-database"
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: database
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: database
      annotations:
        checksum/secret: 90e0d57ebc6da6126ee1a270482b27747d8dede1c6ae5c371fafa2157b82cb87
    spec:
      initContainers:
      - name: "change-permission-of-directory"
        image: busybox:latest
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "chown -R 999:999 /var/lib/postgresql/data"]
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath:
      - name: "remove-lost-found"
        image: goharbor/harbor-db:v1.10.2
        imagePullPolicy: IfNotPresent
        command: ["rm", "-Rf", "/var/lib/postgresql/data/lost+found"]
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath:
      containers:
      - name: database
        image: goharbor/harbor-db:v1.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 1
          periodSeconds: 10
        envFrom:
          - secretRef:
              name: "harbor-database"
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath:
  volumeClaimTemplates:
  - metadata:
      name: "database-data"
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
      selector:
        matchLabels:
          app: harbor
          component: database
---
# Source: harbor/templates/redis/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: harbor-redis
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: redis
spec:
  replicas: 1
  serviceName: harbor-redis
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: redis
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: redis
    spec:
      securityContext:
        fsGroup: 999
      containers:
      - name: redis
        image: goharbor/redis-photon:v1.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          periodSeconds: 10
        volumeMounts:
        - name: data
          mountPath: /var/lib/redis
          subPath:
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
      selector:
        matchLabels:
          app: harbor
          component: redis
