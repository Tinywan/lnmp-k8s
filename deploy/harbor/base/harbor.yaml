---
# Source: harbor/templates/chartmuseum/chartmuseum-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-chartmuseum"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
type: Opaque
data:
  CACHE_REDIS_PASSWORD: ""
---
# Source: harbor/templates/clair/clair-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-clair
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
type: Opaque
data:
  config.yaml: Y2xhaXI6CiAgZGF0YWJhc2U6CiAgICB0eXBlOiBwZ3NxbAogICAgb3B0aW9uczoKICAgICAgc291cmNlOiAicG9zdGdyZXM6Ly9wb3N0Z3JlczpjaGFuZ2VpdEBSRUxFQVNFLU5BTUUtaGFyYm9yLWRhdGFiYXNlOjU0MzIvcG9zdGdyZXM/c3NsbW9kZT1kaXNhYmxlIgogICAgICAjIE51bWJlciBvZiBlbGVtZW50cyBrZXB0IGluIHRoZSBjYWNoZQogICAgICAjIFZhbHVlcyB1bmxpa2VseSB0byBjaGFuZ2UgKGUuZy4gbmFtZXNwYWNlcykgYXJlIGNhY2hlZCBpbiBvcmRlciB0byBzYXZlIHByZXZlbnQgbmVlZGxlc3Mgcm91bmR0cmlwcyB0byB0aGUgZGF0YWJhc2UuCiAgICAgIGNhY2hlc2l6ZTogMTYzODQKICBhcGk6CiAgICAjIEFQSSBzZXJ2ZXIgcG9ydAogICAgcG9ydDogNjA2MAogICAgaGVhbHRocG9ydDogNjA2MQogICAgIyBEZWFkbGluZSBiZWZvcmUgYW4gQVBJIHJlcXVlc3Qgd2lsbCByZXNwb25kIHdpdGggYSA1MDMKICAgIHRpbWVvdXQ6IDMwMHMKICB1cGRhdGVyOgogICAgaW50ZXJ2YWw6IDEyaAo=
  redis: cmVkaXM6Ly9SRUxFQVNFLU5BTUUtaGFyYm9yLXJlZGlzOjYzNzkvNA==
  database: cG9zdGdyZXM6Ly9wb3N0Z3JlczpjaGFuZ2VpdEBSRUxFQVNFLU5BTUUtaGFyYm9yLWRhdGFiYXNlOjU0MzIvcG9zdGdyZXM/c3NsbW9kZT1kaXNhYmxl
---
# Source: harbor/templates/core/core-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-core
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  secret: "aElGQm54ZW1Qc01QY01EOQ=="
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUUwekNDQXJ1Z0F3SUJBZ0lKQVBZL096TE1lVnEyTUEwR0NTcUdTSWIzRFFFQkN3VUFNQUF3SGhjTk1Ua3cKTkRFNE1ESXlOek0zV2hjTk1qa3dOREUxTURJeU56TTNXakFBTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQwpBZzhBTUlJQ0NnS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQWFOUU1FNHdIUVlEVlIwT0JCWUVGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUI4R0ExVWRJd1FZTUJhQQpGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUF3R0ExVWRFd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMCkJRQURnZ0lCQU1Bc0V0VmxFTE13ZHRjaWZIZU9UMGtPbWY1d285SW4vZUZTZ3NjQ3pCTURhUngyQjNxMzZBb1MKSWw3WFdBWnBldmFSN1c3eWVBUkthQXNoQkxoeWdVcUxEMHpXYktsU045SHByZDF3ZHBNMGZmeVBwTjVkeE9ZQQplcjA0eTEyR1JuQ2JNWXFpNGN2enRQNFRpblhxcTJ5SFNZaExiTzlxa0k1Z2JXVnhrUnVJY01Ldml4ZGRsbE5ZClEzb2JKYURESG1vdk0zK2cvRysxWUZndDRxRVMzOFhuSjdCclNzaEhubjVFSVFoMjg2eGZKcml5cksyaEhiTEoKcXowWXVGNkczRFhQZVdHZ1h2ajBIaXBjMGY4VURaa0tray9lR0VJNnZFa3l0eXZvZXBvWkkyWGJBZi9aTXk1bgpLd3VoRW40aGhrRk13V2FTV3AvaDBRZE1DYXhrNEJWU09xbU5WYUxTQjcrRmpzSWo0Q2FzRm90WWl5SjJncFJCCk5mOFFhUzRiejBUbjFlQmJDOGtzaitlM1pXZVgyYjV3Vk1qcWw5alR0MlgxSUNzOEtLZTN2RUJranFUMkFVaTIKNTJUdEt6bTczYVdyei9HUHkvUTJMQ29yM0ZoOUZHVlNCT0JCRFhHeTZNSnBOSEpuWVZIOUVFTkZHT2g4NW9sMQoycEFET0JCNXZBVS9rTEI1TEhQajJrdWUvRk1pSGFObnJTWUlHck1sQlNYMmpqOUVZYTF1dVVIK3BkNE1CajFGCjV1SDhPUmlhUTZodDIrV0hrbHhpYzFSajV5VFlRd1ZsSDcwQ0JPbitxVkVkbzYzeVF3ekFNSktGSXdsR1VRRVgKamlsamdjODZxNGNadFVURnJjd01pZGJrKzhRNitKYkRWZzdIVi8rcG5DK3dudjE5N2t3ZQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQVFLQ0FnRUFrOHE4czRQcnZZYnk3OVVWbFdKTktxY2V5a3dCa3hFMWZqcllPUldRMmhpQWlyeEdWNSs4bERULwprNnVqbTFFV3diNUswSHh4UktrYitQRWExSHFOTkhFNkp4TnBKS0s5ZXhEbFlBUSt4N2RGQnFWci8ybmF6bW80Ck1COE1MWWxtSXp0V1dvU1l3ZThvMm1FZzRxK2J4WXM1SW1kdTdBa2hFN2RKNjNobTIzZ0xNZmVNTGFsUnFvcHUKWEJQd0U1blhQNmFHdVVOSHRHMUs4dFFKRGxaWStMRWJBZU9mUmVOUWhUOU5kUnVrWVNXNTc5dmZLYmxKclN2egp1bGc4OXNWbTNjV0VLNXBCNnJqOXdKYks5NHZvS2Z0VnFiYnVCd1dqZDFhOXBpYktod1ZCZTJMMkZXaHBTWmM1CkYvY29DN25qVGFZVDZ0cjkxeTVWaGhKaElaUUNmL3Z2NFpsNVhoRkhzNVZUWk5iTS9PZnF5RlFMWVhWSk80OEsKRjd0bWF6QUVRUUJRd1ZacUg5QzlOUWR6UEhXbWMzOE9raHRjMXd6YXFuL3JnOSsxc2dBTUQ4aFdDdFFKVWU5NwpiOXltaDVBMFo0UVhLcHlGVDBiK3BYY0QxalJoYTA3VXRrWCsvekxKOUhwQVhjVW16a0crajVDWE5wbnhzSXE1CmZKRmVxM2hCajl3Nm40aCs1ME00VzBGc2U1WW9FVXNjM0IwZno4QmxRQmIrWUpMRkxOSDM0TUg4cDFsMFpEWUoKeWFlMHBzeGxCaWpnNE9QWitXQ0JhK2p0Rlc0TGlXZ0VjeHdnejh3K2hFT0FRcjJhMURjN3c4amQrWTRJSzhVbQpsVFZzNWRicDRtT21QTWxSdi9HTTdrRHVkRnFiTWczWUZ3WGczUWJxdVZxTFp6RXpqVmtDZ2dFQkFQSktaYkNXCllmTGVqa1MvZmtSeVYzVkliNTRtS3dRSG9NV3ViODh0UGdHdVh6anNKeWQ1UVRRNThQcFVqWHJMSG1uOGxTMisKdmlFOEdKeWxLd04xeU1sWnc0MCtrWmhwSFVwQ1d4LzJaS2pBcXZxQTlPT0tvMmZ2NkhkL3dPQW5VNEN0aW9DMQpwcmk3bEtGWVhvUDhEdFFWd0hZdkl6Q1JxRG5oYzRtd0pEcXpUQzl4ZHVJK3N2eHpsNHhIODJmeDBqclBpRlkrCi93T2RYanlmSVBqeWhIQzRqUFRXYmFpcndYUzlkQmpTbDEyOGFJUlQ1ODAveVhFL1NZQXVnZzA1akt0ZzV6UUEKU28xM01UZXpYUkhYZE8wZGkzdEVNSEdSRUVrRnBlVm5uUFF2Q0NlZEswRFYzNmlOd2lXYzhwd2RmTE1WbmVUdApES3daZWRDeCtvLzdldjBDZ2dFQkFPdTQ4REdFSkpKekh4VlI1bVkxSzJBbFp5WXRwVE9XZWhLMXpYNzRKdk0zCll4TjRuZCtaeDVuOXVTUG1tS3pxRjNUVSs0NFJWdGRKSzZlam9GRThkTURUTldhU0xXL1pEbU4xblQwbmp2T24KSVdKbjU5eW5PQ2hXV0taZ1haLzlVcUdSN1B0Nk94U2trZXg5Yy9mWUJzTVgveHVzZFhRaWdlb2dsMGlPWVZGVwpnWElpaUxSTEhwSEpzSy91TnhJaXpqMGhUWVluN3VEN1BSRU53RlJjQ1lmOEoxZVVGYmQ2RHVDVldlUUNLV2dmCk5kMnRTV29pMFZ5bGo0dVVYOEl3MHRqTE5NRDVDUkVKRWs0R1N2NEVEU212VWR2MUxpQktKQ0wybEVjZ29QZUMKb09EMmlDYzVLcWdubVFyYVJpbEZGazhSVlhBOVBXWkdZM0MwYjZUVm1tY0NnZ0VBTlpPMkFPS0FMbENBYlR0YgpGSStrUDA4UlA0dDVINThBTWpac2l3ZWFHbzBRaVduUERxK0ZkNk1JWXBLbjVtdGNBbHZVTVJWb3ZiaW9TSnROCmM2cHNCL3BOZjhKQ044Mm1xSEViN1dseXdNNDZBTUxiWkNXWUZMZThWQkJ2K2lFNEdkQkdQRWZ1NGhLNHZ5VG4KWVpBdlJ6NjRIR280QWRsenRiamc3NlYvbld0Z2dXMDV1TFhjcG01NUtKQVFodisyV1VMakJ3OVBIT0dEb1N3ZgpBbTIrVTU2N3JMaHQ3MHByc1FEajEwbGFKMlF1U0hTMVlYR2xmZUZjdzNlRlVwOVROK0pwdmRvQ29sMmxDSWdsCklIamdaajZPUldmQ3Zwb3hXN1JnQnVadWtxQ0QwUjYwSGRZdGF2eE4zanRpZXBzYXBBODNweE8wSmFwTWdaV1oKcnBVUmtRS0NBUUJPY0V2OUxpdTlUL0dYOXBqa2llelZJWjBoWnk4QjY2RFRlUXZZcEZyUnRDeVQzaDhxdU5GaQp2THRPNXYwSERSNmhFZjVqV0FHOXdldDA3VTM3dWxKZmwraTlLUWRWb0xUWkE5bys3MXJ5V1RzU3MrREQzQ0VqCnl4ZlV4VnhpVUxtZWFpQ2h6aHE2MDhoN0dZUHRoVVU2eGxGdHRBV2hqNW9MZnF6WXlBZzZPTDc2YStOeG0wMmcKMWF5bDNtOFU2ZUFYRjIza3BvVW0rSE5wcVZuR3VKbXpWb1VBNzVZS1orTnJlRWRoU0JiZlB3TjlzSnd0WlVpbAp1N0g0a0hjTTk1SXg4ZXlzQ2pLcUtJcWV6QmxJVGJEVG5qTnZMamNiSjVDKzBhNmx2SVhUMXZRUjUvZUdsYzlNCkJXRTM2MHBOa1YvTEQ4bU9mOUplcGkyUTQzb0RMOUVoQW9JQkFRRFRXSW1meTBLOWdHekEyclB5MTY5bVdZUUsKT2xjbkQzK2hRcTZ4NTFabjFlL3RleEZlVmxoSG40cnJuUmRDRk9BcDQ3dUZrSjJtNzJHQ1ZENzRFd1F1Y0s5eQpBRDVqb3JxZ1ZIcUNLWmRrSGpiMlY2ME16bTZnM3J0TDlXSlhGVkx2TkJiL1FHQjJ2Z0hWT08wenFpcUdaajRlCkV4N2wybS8vNVNFNERMdG43MEo5Q2dHMUh0WENTOGRXckdQTDFwekRuazhWWHRub1h6YjBMQ2hMVUZFZ1pSbWgKY1Y2QUZIRUsySDh3Qkh2aU55ZWhzUlFpRGtsMkFpV09jSk52a3pXNjhjazJuSmpSV3lQWUsxSkwzTkNLcEIzUQpPb2hyUDBmSGNXQVhNVzk3d0ZYWmhSZm5RZkR4eElPbGozTWNZVDBBbGFuWGQwRjROR2MyTnZtcGh4MDQKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
  HARBOR_ADMIN_PASSWORD: "SGFyYm9yMTIzNDU="
  POSTGRESQL_PASSWORD: "Y2hhbmdlaXQ="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
  CLAIR_DB_PASSWORD: "Y2hhbmdlaXQ="
  CSRF_KEY: "VHdBNFZQTEpEVGxubUZnRHVSNjhUaWJSZ0x5NEM5S1Q="
---
# Source: harbor/templates/database/database-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-database"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
type: Opaque
data:
  POSTGRES_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/ingress/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-ingress"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
type: kubernetes.io/tls
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQUliMUthZkpJZEhSMDk1ZlVhZkJpYWN3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSmFHRnlZbTl5TFdOaE1CNFhEVEl3TURneU56RXlOVEV6TTFvWERUSXhNRGd5TnpFeQpOVEV6TTFvd0h6RWRNQnNHQTFVRUF4TVVhR0Z5WW05eUxuUXVhMmh6TVRrNU5DNWpiMjB3Z2dFaU1BMEdDU3FHClNJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURaeDJva0Q0K1J3VkFndVhDV0gwTXVQdjBWWW1WdnczbDIKZEUvTmtEWTNZVUxFdWZMRDNzNW9wRUxVVTJITm90SFduYUdBZ01mcFkrSFhaVm9BNGRHU2hoVGs4ZGhVOEtZQwo5UVd4SVprOTY3QmJkaXZ3Z3R4MnYrcGx3VW41NUwwY0VpQ3JiUnZzczZiKzh6UFh3eE9oMnVDTDNCOXdpYU1QCjV1eEJmZnFReUZRWWhPSmpnbGpWL0xORFB3WkxHejlNVUlEVER3OWpyNnFMZzQ2aGdwR0J0TUZHdzI1M3pwWGIKS0ljVEtVd2xQeFRDK3JKQUNFbWlKMEdpWk5TM0ZVSTlyS0VHYnNLZ2lIQTMwOFM1azB2Tlp1SmV1dDBLR2pOUwpneVZ1dEd6NXdlQkFrTk9PWkxtVm5seFBmR0lDaTZ6bGxVTW04cVNXZ2gyZTRBMHExLy9YQWdNQkFBR2pmVEI3Ck1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXcKREFZRFZSMFRBUUgvQkFJd0FEQThCZ05WSFJFRU5UQXpnaFJvWVhKaWIzSXVkQzVyYUhNeE9UazBMbU52YllJYgpibTkwWVhKNUxXaGhjbUp2Y2k1MExtdG9jekU1T1RRdVkyOXRNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJ1CkluSjFWY3FHcVRJbFFqQXpiMnpkVXNiZ2dNNDVBWFMzRlhDWFhoSWp6ZVVSb1hvZ1FYcTFpRUd2Mk83OTVQVkQKVnJ2bURXNmd3eDhJUDN1Mk1ua0FXbHZVT2dSb2FQbFduYkZtRnl6NEdvd1pVMlM0dWVHUk1JQy9GOUNiTHRXTAp2WUZYZGNWU0RFdHR2UDJqQXdnWXpXaWM0eGJ1bVpYTU9taXM0eGlnUnljeVoxaGFrdyttSkxiNEhwc2VGRUpjCkROMVFrWVpKM09SN1QzcExTQmRjOHVmQ1d4ZFJYU0Z3TGY1OFhCSlJNeVd3N3BWT2pRYUV2dkxja1RrOTBkTFIKTG9mUDVnYjZjclBwOVJsM1dQQ2Jvbyt6OElMTXhvM0JCay96Uko4Vkx0VXMxOVg4eHlsOUFQUmRLUnljSWswTQpYcnQxRmsxY1BkWVdHcDZrT1M2RgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBMmNkcUpBK1BrY0ZRSUxsd2xoOURMajc5RldKbGI4TjVkblJQelpBMk4yRkN4TG55Cnc5N09hS1JDMUZOaHphTFIxcDJoZ0lESDZXUGgxMlZhQU9IUmtvWVU1UEhZVlBDbUF2VUZzU0daUGV1d1czWXIKOElMY2RyL3FaY0ZKK2VTOUhCSWdxMjBiN0xPbS92TXoxOE1Ub2RyZ2k5d2ZjSW1qRCtic1FYMzZrTWhVR0lUaQpZNEpZMWZ5elF6OEdTeHMvVEZDQTB3OFBZNitxaTRPT29ZS1JnYlRCUnNOdWQ4NlYyeWlIRXlsTUpUOFV3dnF5ClFBaEpvaWRCb21UVXR4VkNQYXloQm03Q29JaHdOOVBFdVpOTHpXYmlYcnJkQ2hvelVvTWxiclJzK2NIZ1FKRFQKam1TNWxaNWNUM3hpQW91czVaVkRKdktrbG9JZG51QU5LdGYvMXdJREFRQUJBb0lCQUNPQXV2RCtDRzIra2cyRApyYk1MamF3d1lKbm4zSm1IeUhsakpNOWlQelJ3Q3E1L2tmQVVscG5BalpTSHMxNE91UjYvdStCekhpUVNRSE1ZCjlyOUdFU0JOODRJUFd6RWR1aktwTnpCVlJlSXVWaVhTOGY3WGxwRlZZQ1VPaWJ6UGFYVDJENVZpeURhaVl3c1YKSXRKOTN1bDRBVHRMdTJSaFM4Ly8yV3dqMllGWW1rQ21aVDdBSWR1bXZSbUtEdWRobkpjNSt5WDVuYVl5UzhIZgpPSjF1bFlXT0YwSGlEa2I1cCtSRjR1bDZENVBHUVhCMFBsU1JLOGViTVZjL2tsNEt2LzdWU3Y1MTZIajI2Ly9lCkRzWUFiYnlyZnpIaHh4anV5STl1WlVVLzF4dC9MZDJFTnBmcHhaSUpXcWN2N09GdFhwdG4rcitXK0dOaUZoNlMKd29KbEhDRUNnWUVBNitEMm8xc1NXT2E0d2lNRG1BOGl2NmQrd1Z3MzlwV1ZZY2J3Z3ZRMThOdUwrNE1JT0I3MQpQbHdaZjlSZGtmdUoraDVHWUFKTVVkeWlaZDBQbnpzTlFtelZBejdESmVibXdLOG1QdTJPSDBXaTJNNXRuMy9FCkVXQytOL1JmVElmV1V3a1hIVldrZ0pRdjVTQTZoM1JpdW1EZUNDQ1hGNU94cEZJbjZMRzRxK01DZ1lFQTdGc3gKdGd0SG9uM2VDcDBqSytBanVad0pMMURGa1ArUFEyV0ZlTlB4bWI2MFpldkRRbVlUdlBMODFtRkd4QlkxQnU0dApOY0dJTkNLRE5OajFoSVJ3VXltUUt5ZjQ0Mk9zZmpQL2dJWXJPdm43aU0vU3VseEpRUEhqM2xmTlRvL2RWWU8zCnVHeE9hNFVsdEFoZzU5aGlwUTdEN1IwZ20yMVZlRHJHZmtCa1JuMENnWUFOSUV5NVZIVVY2MmoyckxvamVSd20KN0N3Nm1HWW8yN1FmWjlHMGgrQ0VrY01kY1BKQkpUL2lnMytMeElhY2ZCSDJrRDY4VXdScVBjdnZ2VGlFVk9YcwovMTl2T2N2a1RSQWtRdHJ1LzRzOEpFVG1xYjRoOVJzMUdGd2Rnd1RXbm15SDNHYWo1RU11UUpEVndGQmhmMUdMCks1N1BkdmpSZ0ErUHBGN0NMVG1vbndLQmdHRzRjcDBwbkx4NS9jdTFuRTBQcHJXZTVjMUNQK3pyUEhoSkNSNGoKd3NnbUtML2E4aWdKdkM5cTUwNWJlYjZvejlQRnRidDhBS3hOZUtIbzhkbVFTRUNaOXBsaE5XNE9UOHIrQksxRwp5Nmplb2ppMmRCSEpCaUJyNGlLVGVyYjRsREkrK3o2c3lOOTdkVk15QTU3WHdERXVJYU52WDRQamVHcjFJZ3dnCjQxU2hBb0dBUCtVQnN5ekpWSE94SlNrYUI4SnRKTzFhZktTZnhYM05RTDFKNEdpN3JjN01HYkV1SHNQY3pLd0wKMzVDY3JkNUprVWtweGsrcUU5RzBzejJwajJYYVYxTVJBTHoxT3krOWpaa2JsNDVvYlN2djQrUG5oblNSNEtjMworRks1YkxjTk9tSHZndkhtV2dieEZCc3VIbXBVcElUNXp3dWpsWWhQZWhaTS9ySmNZTGc9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM5VENDQWQyZ0F3SUJBZ0lSQU9ic29PTStBejFpSG1adFMyM3ArNzR3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSmFHRnlZbTl5TFdOaE1CNFhEVEl3TURneU56RXlOVEV6TWxvWERUSXhNRGd5TnpFeQpOVEV6TWxvd0ZERVNNQkFHQTFVRUF4TUphR0Z5WW05eUxXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF3WGNOdnJvMmZralhWaGpzbHlGcWliWXQ0bGxvSTVXb2dDdEdUR1pIeUV5K2RjRTUKNkdaOWZxblZndUhSQnRNbThwWTcwdW8raWF2cFpXa2xRUUs2OE80WlZramMydVY1Z3Y0RkdjVlhzZEVrSW02egorbmY1aGdza0ZNUXJuYTdBN0IzL2VjQnhVMXYwdVdrTGFnWGFPTXFnR3JEZTlETVFVVnZkUm9oUVUzOUNhSS8vCmJpM0M4QmZ1NlFzUmhrbGtyNEV2eTV0UkM5cjVNa2ppNVpSaXBqZ1ZZTGVMNDJGT212RkxiTjNKWlZrVW9nSDcKNE9uTWFSL3pKWW5pQjY2bzFjSnpJR0pVdUZuK2hVMTAyb3JkVU9oaVJJSWd2T0NaSlZvem56cmNLVlFQbjBZYgpVdE1pUmlWN05KSXErTG9wdGZDNGQ2cjVIUGpiOVZqTDhlRUlTd0lEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBRmZ2VWFBazB6ZlVDV0dqVE9lZk1BQmtJWE9BdjN3TQpuRFZhajFIMWdMSit1aDBOTytKV2daZWZIVDRud0psR2NiQy9JSUxZQkYvWE9COUJobFJ4MFVNcmZVNmg3aElGCi81TmhBWTdrNUJkYnd5Qm5zdWwwYVcxc1piQU1FUzIxR1BmeEYzY3BWMWtSSEl0RDNBZW1DSzlJT0xoazJzVEUKclFHdkRoY3FTckthbmZIWVZPZDhsSnVlelVqUjhZK3J5VUl3TjZ1azJKU0dvVmVjc3h0eEFqYkpwWGQ0bmFBUgpLaHk2a2M0UWZZNVZHcDBoRk5ac2t3bVp2NDdYUU9OWHRJVmxWSWJnNE1iMmdhNFB3TG51UmdpREZGUzgwSVFmCmhSSW1HQTIzTTExMHB1T0l6NmJTKytVUG5nQVVmcnVxb1ZPTUdSZmU0U2tSNXhGK05ONUY5VEU9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
---
# Source: harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
type: Opaque
data:
  JOBSERVICE_SECRET: "YzlKdnhoM2dkd0NRTlRleQ=="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
---
# Source: harbor/templates/notary/notary-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-notary-server
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: notary
type: Opaque
data:
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURBakNDQWVxZ0F3SUJBZ0lRZEh6VjRvelFFdFRrL0JIY0tENU96REFOQmdrcWhraUc5dzBCQVFzRkFEQWIKTVJrd0Z3WURWUVFERXhCb1lYSmliM0l0Ym05MFlYSjVMV05oTUI0WERUSXdNRGd5TnpFeU5URXpNbG9YRFRJeApNRGd5TnpFeU5URXpNbG93R3pFWk1CY0dBMVVFQXhNUWFHRnlZbTl5TFc1dmRHRnllUzFqWVRDQ0FTSXdEUVlKCktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU5oRkk2SDJxNlFGNnVSOVdmUjdnSy85RnAxZEduQnEKWHN5aWpsTFV0VXh4anluMU5tSFlPdTVPdEtpRWdkWUlRK05PWUlNZk5RV0x0azdnaDNKSXpiejJSSlZSVDVjQwp6MHAzUlNBOU9lakRDYnZmY0FMS2ZuWE5Wd2YyWjdVMWw1U1djYU9JUm1TYWdneTZiNDNJb0ZpSWNvMHJhOU1TCkRSUTNNMFNZcWJqVGhtU05RTEVJeXZkUE1mUkVMZmNtQ1N0Wi9MZ05yUFVYSGpRQW0wd0x2WTQwbU94eS9GbTYKcERVVzgwZDRkaUMxemptdW14RG85d0xjeS93SDhxa0tBMkdqODhkektnRWIwOUNwenR0bVJBaWVjalJDdFJTcgp2Qko2U3YrTVN0T3JGOTN1V04yOTJ2dmZ4QWt6c2JUM1l4R0I5NTdXcXZHM2lMU0RPUkZMQ1E4Q0F3RUFBYU5DCk1FQXdEZ1lEVlIwUEFRSC9CQVFEQWdLa01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0QKQWpBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFBYzdUK0pQaE9tcG5XZwpuN3pIRXlFM1RGVzJhdVJnazF5Y3BiOG1PVWpPWlpTS0MrZWI2WEtqZDgrdlJITHVrNVFoOUs4Qjk3V3FFR2pmCjNmWjBBeTg1a3BjN1dBUFZxZzUwQ3lCbzZaWHBqT2ZrRmtuaWhtR1NjMlpQRGh3VG02aFkrbjFjYTlIZk5jY0YKMzZlT0d4em4rdUdUNS9HclE1OGNLeHQyc3ExdlRnckx5THh2Rm4yT0xLTkNTMnlVUWVNcTZzalRaa2hmMlVPcQozaGhSZUVKM1JNWDl2bHExTUR2YXA3ZmI2dGxmN2c1NkM5SFNmTWRCSE1pWDVFWnVnaEppQ2pSbEpEbXNTUkgzCi9xaGZsSGJ3MnkyVE51M3ZTK0RsTXpSUEx2dW93SjlPTTR4QXNDd3RrMXRLUk9GeUtnSXZNbFJDbXltRS9pZGQKaTVDbUs0MWgKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lRVml3UU9rM200Mk50YjFzcmxpWmZZREFOQmdrcWhraUc5dzBCQVFzRkFEQWIKTVJrd0Z3WURWUVFERXhCb1lYSmliM0l0Ym05MFlYSjVMV05oTUI0WERUSXdNRGd5TnpFeU5URXpNbG9YRFRJeApNRGd5TnpFeU5URXpNbG93TERFcU1DZ0dBMVVFQXhNaFVrVk1SVUZUUlMxT1FVMUZMV2hoY21KdmNpMXViM1JoCmNua3RjMmxuYm1WeU1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBcGJ2MkNtQTIKV210TndtMFFrU0Q2UVVWaXpBa3FSYkt0UThtUXVXQzRtSGFqQUdmdVkrdmJwd3h0U1hRaEx2MTJHcno0OGo4dApsa0lvKzdoZnRkWDNKVHpBN0VXSllWYXcwZ2FhTi9kNVJVR0RWV25iMFNXZEM2UzZlV1A0RnEyYlhDMEpJdnB5Clg5Q2o5d3pMRWh6eENSemJiRnFOV0ZsV3J6UnJUVmZhU1JqQVkxMnRIVy9Oa2FwbGY3K1NsQWNIa3pHbzZubzgKdTBkY2NWc3M1RnJqejkxcWkrN1VMQkNZNzFrUFRSNWZrclJPTWoyaGVqYW1zMituNmlkY0RnWFFvd0VuQUl2SwppYWhBZDJFbHEyU3Y1T3U2a1pYcE9ScVBzVktKdGhtSUxYN1o1bTNwQ2xhdFo5cWhHZzN6VDNxaWhOMFlXMkEyCktSeVZtblpuMlRvd1ZRSURBUUFCb3o4d1BUQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUkKS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUtPZGh3VXVqbVFQemxnWVgxRTMvdG90MjRDdzVPVkJ0UXZ2VG1KMEdLbzIzSXlJLzVReGNOdFhiWEFlCmRNK3JjSVN5eEh3UERtc3ZKd2NrcFdGVlpvY3laL09CNkM0WThld0hqWlR0cVVVT2xsc2NQVGU0WC9NV25ma20KSzg2Zy9hTVBwcitkSkdPVHZsQmtEQXhua0FIUjhUR2lEVmI4SWU4Nk9aSiswQm9GcytvNWhTOTQ3UmNEMzhGbwpGbnpiN2ZFblIxOVBwZSt0MDFTY2hyS3hsQ1UvY3ZWTHRqMzRLdk12TkcyR3ZsVEEvaUxVcTZ1RHhJZGJIQWdMCmZ5bHRBWFZhS1pHaEp4cjErM1loeXFUUk80aUFlWi9kTWhSTHBhL2FMSHh1WTVlb05sb1FDTC8zZEFSbEl6TlkKSFpuakI1ZVEwQlI0VE54bkVnczJ4YlNISkhBPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBcGJ2MkNtQTJXbXROd20wUWtTRDZRVVZpekFrcVJiS3RROG1RdVdDNG1IYWpBR2Z1ClkrdmJwd3h0U1hRaEx2MTJHcno0OGo4dGxrSW8rN2hmdGRYM0pUekE3RVdKWVZhdzBnYWFOL2Q1UlVHRFZXbmIKMFNXZEM2UzZlV1A0RnEyYlhDMEpJdnB5WDlDajl3ekxFaHp4Q1J6YmJGcU5XRmxXcnpSclRWZmFTUmpBWTEydApIVy9Oa2FwbGY3K1NsQWNIa3pHbzZubzh1MGRjY1ZzczVGcmp6OTFxaSs3VUxCQ1k3MWtQVFI1ZmtyUk9NajJoCmVqYW1zMituNmlkY0RnWFFvd0VuQUl2S2lhaEFkMkVscTJTdjVPdTZrWlhwT1JxUHNWS0p0aG1JTFg3WjVtM3AKQ2xhdFo5cWhHZzN6VDNxaWhOMFlXMkEyS1J5Vm1uWm4yVG93VlFJREFRQUJBb0lCQUQzQlAvaTF5UXNBR01WdApwbEt0bXhKZkxHVWl0U0dyWm14djJ3RjRUTkJpeEhJT1NBSHJqTGsrSkNyT250N0hpdzZEZzYrZ1l2Z3VSdDhrCjRHVDlDVTVTeVFCQkdPT3dUY3Ewc3hwUG1GeDZBTm4reSsydXVrbndZNXQvNkoxcXF3MDVxc0hoMkdSamRmVkUKU3hiQXVmL1BST09uQ2l2MWZodGl5T2pVNTMxOHBkdmZNRHhKdnJUSnVxNkUySVFNc2l1ZDRTTzF1d2VMVmVHUAp1L2psdnVYdWl2ZzVvTUl3UFM0RlJSQVA4TkVpb3AxWStsNWtiS1pleHFIZWhxcG0vL1JtVGZJV05pcGZOcFA4CmdlRGYySG5iclIwYXJKdTJiNzJ6ek52RzdoTi9pU0huL2V3RzZNZEY2dDlRKzdLQ0wwM0NXM3VWRXBndDVkaUcKL05DQWQ3RUNnWUVBMlJpaGJTNWpZcG4xRzhTa0Q4TEI3OU9vcXB3YW5TcE1uaXBrYXljVkVTOWFialZFUzRxcQpvUU01YjlDTEFzbzlrY3BxckxxQ21hazZPWXdGa29hY0k2MkhRYTNlVEg5cVQzdG5ac2FxVFFveTNlaGFjdUxyCnI4dTVXS0ZzZXlIRGhkSklGZm45L1lnQ0kzNTZaNUtlRXdjUXBjLzNIMTBvdVR0QU54SHptbk1DZ1lFQXcyOFUKaEdwazZCeFBtejdvUjNrZFJuVkZnL2lzdFlhWTVpVmIxejZJbjdsU0g5NWF4R0w5NWROYmcwQjVzTGlwTHd6VgpoRlZmMFdIUC9DMkZDV0lJZmhXU3NnajFSMXA4cWJUemI2cjM3ZTJCcGEzT0lCa0RXcUlCNmNIbkc4ZmVGWXF1Ckc2WS9aSisrZUVUeDBqdHY1TDNRQ21ldGl1VkdYUW5UNHNubmNCY0NnWUFZUVRJMzJvanNDVHRqUU5MN2w4ekgKR0tTdGV3ZFdLOVduamlEdC84M1F2N09nd0g3QzJkazZaL3ZRekVIYnEvQzVDeDVqOGVxSmRHaTI2VGZ1S08vawo1SXhLQUR6bjJ3eHJtT1B5alp1VlErQnUvbmlzZ1VISHdFRVM3K1lJMDdyZWhxSGJJclVIMEZ3OHp2S3FBNjE1CmZyNlRaK3E2TEZSU2JaWTlFTnBnbFFLQmdEclJWNDl5cGVQbGdWL3IwdVNQNHV1dHA3cE1RVTV3cjl1MEtxdmgKT2lVNEZTdGFORjhlbStOcmRRTlBpRkJUZ3plUjJVRDJvTnZYWUUwNU5lelpBRTFTR05CVU9kMjdzZ0V4WUlLZgpKZmNKb0JkSTg5eGRLdEZBS09zOVhGelVEbGJWWWdrWVE4UDQvODRha2R6LzNuRXRYMHVDWUl5STdHQmI4TlUwCmh0OEpBb0dBYStHc1NvWXdGcEcvL0ZLREVyejVZdkVvYnNGR1lBWlcyUzdLaHBidVc2QWw0K1VQUHNCZzBodmgKRGRGaHNYam15N1o5ZERnVSsyL1dMK2pYcWxWNTBJT0pGTERFUkhLN3VGR1FPK3ppaHMySFd2ZWtJelZoRTBUcApZR1gyK01wSUN2YVVpc2lERjVOcnpnK0xsOGw2VUFvSEdjSXczYnJnMXVYT3FJcjVGSTQ9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
  server.json: ewogICJzZXJ2ZXIiOiB7CiAgICAiaHR0cF9hZGRyIjogIjo0NDQzIgogIH0sCiAgInRydXN0X3NlcnZpY2UiOiB7CiAgICAidHlwZSI6ICJyZW1vdGUiLAogICAgImhvc3RuYW1lIjogIlJFTEVBU0UtTkFNRS1oYXJib3Itbm90YXJ5LXNpZ25lciIsCiAgICAicG9ydCI6ICI3ODk5IiwKICAgICJ0bHNfY2FfZmlsZSI6ICIvZXRjL3NzbC9ub3RhcnkvY2EuY3J0IiwKICAgICJrZXlfYWxnb3JpdGhtIjogImVjZHNhIgogIH0sCiAgImxvZ2dpbmciOiB7CiAgICAibGV2ZWwiOiAiaW5mbyIKICB9LAogICJzdG9yYWdlIjogewogICAgImJhY2tlbmQiOiAicG9zdGdyZXMiLAogICAgImRiX3VybCI6ICJwb3N0Z3JlczovL3Bvc3RncmVzOmNoYW5nZWl0QFJFTEVBU0UtTkFNRS1oYXJib3ItZGF0YWJhc2U6NTQzMi9ub3RhcnlzZXJ2ZXI/c3NsbW9kZT1kaXNhYmxlIgogIH0sCiAgImF1dGgiOiB7CiAgICAidHlwZSI6ICJ0b2tlbiIsCiAgICAib3B0aW9ucyI6IHsKICAgICAgInJlYWxtIjogImh0dHBzOi8vaGFyYm9yLnQua2hzMTk5NC5jb206Mjg0NDMvc2VydmljZS90b2tlbiIsCiAgICAgICJzZXJ2aWNlIjogImhhcmJvci1ub3RhcnkiLAogICAgICAiaXNzdWVyIjogImhhcmJvci10b2tlbi1pc3N1ZXIiLAogICAgICAicm9vdGNlcnRidW5kbGUiOiAiL3Jvb3QuY3J0IgogICAgfQogIH0KfQ==
  signer.json: ewogICJzZXJ2ZXIiOiB7CiAgICAiZ3JwY19hZGRyIjogIjo3ODk5IiwKICAgICJ0bHNfY2VydF9maWxlIjogIi9ldGMvc3NsL25vdGFyeS90bHMuY3J0IiwKICAgICJ0bHNfa2V5X2ZpbGUiOiAiL2V0Yy9zc2wvbm90YXJ5L3Rscy5rZXkiCiAgfSwKICAibG9nZ2luZyI6IHsKICAgICJsZXZlbCI6ICJpbmZvIgogIH0sCiAgInN0b3JhZ2UiOiB7CiAgICAiYmFja2VuZCI6ICJwb3N0Z3JlcyIsCiAgICAiZGJfdXJsIjogInBvc3RncmVzOi8vcG9zdGdyZXM6Y2hhbmdlaXRAUkVMRUFTRS1OQU1FLWhhcmJvci1kYXRhYmFzZTo1NDMyL25vdGFyeXNpZ25lcj9zc2xtb2RlPWRpc2FibGUiLAogICAgImRlZmF1bHRfYWxpYXMiOiAiZGVmYXVsdGFsaWFzIgogIH0KfQ==
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-registry"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTPASSWD: "aGFyYm9yX3JlZ2lzdHJ5X3VzZXI6JDJ5JDEwJDlMNFRjMERKYkZGTUI2UmRTQ3Vuck9wVEhkd2hpZDRrdEJKbUxEMDBiWWdxa2tHT3ZsbDNt"
  REGISTRY_HTTP_SECRET: "SG1IM0syelppbWxoTnB2Mg=="
  REGISTRY_REDIS_PASSWORD: ""
---
# Source: harbor/templates/trivy/trivy-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-trivy
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
type: Opaque
data:
  redisURL: cmVkaXM6Ly9SRUxFQVNFLU5BTUUtaGFyYm9yLXJlZGlzOjYzNzkvNQ==
  gitHubToken: ""
---
# Source: harbor/templates/chartmuseum/chartmuseum-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-chartmuseum"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
data:
  PORT: "9999"
  CACHE: "redis"
  CACHE_REDIS_ADDR: "harbor-redis:6379"
  CACHE_REDIS_DB: "3"
  BASIC_AUTH_USER: "chart_controller"
  DEPTH: "1"
  DEBUG: "false"
  LOG_JSON: "true"
  DISABLE_METRICS: "false"
  DISABLE_API: "false"
  DISABLE_STATEFILES: "false"
  ALLOW_OVERWRITE: "true"
  AUTH_ANONYMOUS_GET: "false"
  CONTEXT_PATH: ""
  INDEX_LIMIT: "0"
  MAX_STORAGE_OBJECTS: "0"
  MAX_UPLOAD_SIZE: "20971520"
  CHART_POST_FORM_FIELD_NAME: "chart"
  PROV_POST_FORM_FIELD_NAME: "prov"
  STORAGE: "local"
  STORAGE_LOCAL_ROOTDIR: "/chart_storage"
---
# Source: harbor/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-core
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
data:
  app.conf: |+
    appname = Harbor
    runmode = dev
    enablegzip = true

    [dev]
    httpport = 8080
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "harbor-database"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  POSTGRESQL_SSLMODE: "disable"
  POSTGRESQL_MAX_IDLE_CONNS: "50"
  POSTGRESQL_MAX_OPEN_CONNS: "1000"
  EXT_ENDPOINT: "https://harbor.t.khs1994.com:28443"
  CORE_URL: "http://harbor-core:80"
  JOBSERVICE_URL: "http://harbor-jobservice"
  REGISTRY_URL: "http://harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://harbor-core:80/service/token"
  WITH_NOTARY: "true"
  NOTARY_URL: "http://harbor-notary-server:4443"
  CFG_EXPIRATION: "5"
  ADMIRAL_URL: "NA"
  WITH_CLAIR: "true"
  CLAIR_DB_HOST: "harbor-database"
  CLAIR_DB_PORT: "5432"
  CLAIR_DB_USERNAME: "postgres"
  CLAIR_DB: "postgres"
  CLAIR_DB_SSLMODE: "disable"
  CLAIR_URL: "http://harbor-clair:6060"
  CLAIR_ADAPTER_URL: "http://harbor-clair:8080"
  WITH_TRIVY: "true"
  TRIVY_ADAPTER_URL: "http://harbor-trivy:8080"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  WITH_CHARTMUSEUM: "true"
  CHART_REPOSITORY_URL: "http://harbor-chartmuseum"
  LOG_LEVEL: "info"
  CONFIG_PATH: "/etc/core/app.conf"
  SYNC_REGISTRY: "false"
  CHART_CACHE_DRIVER: "redis"
  _REDIS_URL: "harbor-redis:6379,100,"
  _REDIS_URL_REG: "redis://harbor-redis:6379/2"
  PORTAL_URL: "http://harbor-portal"
  REGISTRY_CONTROLLER_URL: "http://harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-clair,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,harbor-trivy,127.0.0.1,localhost,.local,.internal"
---
# Source: harbor/templates/jobservice/jobservice-cm-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-jobservice-env"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
data:
  CORE_URL: "http://harbor-core:80"
  TOKEN_SERVICE_URL: "http://harbor-core:80/service/token"
  REGISTRY_URL: "http://harbor-registry:5000"
  REGISTRY_CONTROLLER_URL: "http://harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-clair,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,harbor-trivy,127.0.0.1,localhost,.local,.internal"
---
# Source: harbor/templates/jobservice/jobservice-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    #Server listening port
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
    job_loggers:
      - name: "FILE"
        level: INFO
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: INFO
---
# Source: harbor/templates/portal/comfigmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-portal"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
data:
  nginx.conf: |+
    worker_processes auto;
    pid /tmp/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        client_body_temp_path /tmp/client_body_temp;
        proxy_temp_path /tmp/proxy_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;
        server {
            listen 8080;
            server_name  localhost;
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            include /etc/nginx/mime.types;
            gzip on;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            location / {
                try_files $uri $uri/ /index.html;
            }
            location = /index.html {
                add_header Cache-Control "no-store, no-cache, must-revalidate";
            }
        }
    }
---
# Source: harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-registry"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: "harbor-redis:6379"
      db: 2
    http:
      addr: :5000
      relativeurls: false
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      htpasswd:
        realm: harbor-registry-basic-realm
        path: /etc/registry/passwd
    validation:
      disabled: true
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: info
---
# Source: harbor/templates/chartmuseum/chartmuseum-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: harbor-chartmuseum
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: chartmuseum
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Source: harbor/templates/jobservice/jobservice-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: harbor-jobservice
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Source: harbor/templates/registry/registry-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: harbor-registry
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: registry
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Source: harbor/templates/chartmuseum/chartmuseum-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-chartmuseum"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 9999
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: chartmuseum
---
# Source: harbor/templates/clair/clair-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-clair"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: adapter
      port: 8080
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: clair
---
# Source: harbor/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-core
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: core
---
# Source: harbor/templates/database/database-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-database"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 5432
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: database
---
# Source: harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: jobservice
---
# Source: harbor/templates/notary/notary-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-notary-server
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
  - port: 4443
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: notary-server
---
# Source: harbor/templates/notary/notary-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-notary-signer
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
  - port: 7899
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: notary-signer
---
# Source: harbor/templates/portal/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-portal"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: portal
---
# Source: harbor/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-redis
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 6379
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: redis
---
# Source: harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-registry"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: registry
      port: 5000
    - name: controller
      port: 8080
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: registry
---
# Source: harbor/templates/trivy/trivy-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-trivy"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: api-server
      protocol: TCP
      port: 8080
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: trivy
---
# Source: harbor/templates/chartmuseum/chartmuseum-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-chartmuseum"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: chartmuseum
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: chartmuseum
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: chartmuseum
      annotations:
        checksum/configmap: 302662f75d2487bd7ccbae0433c7d9434628cfe369d9d8531632f13aabc8a2ef
        checksum/secret: eedbdc2cec3014448f8a4a11a2e66285ed85bf31db6653175f19c39376e852af
        checksum/secret-core: 78a889c103b49f7fd8111efc46710205ce9e82ee0bb6b0e8cadd9e538f3a82a0
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: chartmuseum
        image: goharbor/chartmuseum-photon:v2.0.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            scheme: HTTP
            port: 9999
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            scheme: HTTP
            port: 9999
          initialDelaySeconds: 1
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "harbor-chartmuseum"
        - secretRef:
            name: "harbor-chartmuseum"
        env:
          - name: BASIC_AUTH_PASS
            valueFrom:
              secretKeyRef:
                name: harbor-core
                key: secret
        ports:
        - containerPort: 9999
        volumeMounts:
        - name: chartmuseum-data
          mountPath: /chart_storage
          subPath:
      volumes:
      - name: chartmuseum-data
        persistentVolumeClaim:
          claimName: harbor-chartmuseum
---
# Source: harbor/templates/clair/clair-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-clair
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: clair
spec:
  replicas: 1
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: clair
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: clair
      annotations:
        checksum/secret: ec13977f3d8ba8afd6f205d8b996378d43e4f9cef8ff01823c3ba862cbab9ef4
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: clair
        image: goharbor/clair-photon:v2.0.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 6061
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 6061
          initialDelaySeconds: 30
          periodSeconds: 10
        args: ["-log-level", "info"]
        env:
        - name: HTTP_PROXY
          value: ""
        - name: HTTPS_PROXY
          value: ""
        - name: NO_PROXY
          value: "harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-clair,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,harbor-trivy,127.0.0.1,localhost,.local,.internal"
        ports:
        - containerPort: 6060
        volumeMounts:
        - name: config
          mountPath: /etc/clair/config.yaml
          subPath: config.yaml
      - name: adapter
        image: goharbor/clair-adapter-photon:v2.0.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /probe/healthy
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /probe/ready
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        env:
        - name: SCANNER_CLAIR_URL
          # To avoid a pod cannot reach itself via service IP when the clusters disable hairpin
          value: "http://127.0.0.1:6060"
        - name: SCANNER_STORE_REDIS_URL
          valueFrom:
              secretKeyRef:
                name: harbor-clair
                key: redis
        - name: SCANNER_CLAIR_DATABASE_URL
          valueFrom:
              secretKeyRef:
                name: harbor-clair
                key: database
        - name: SCANNER_LOG_LEVEL
          value: "info"
        ports:
        - containerPort: 8080
      volumes:
      - name: config
        secret:
          secretName: "harbor-clair"
---
# Source: harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-core
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: core
spec:
  replicas: 1
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: core
  template:
    metadata:
      labels:
        release: RELEASE-NAME
        app: "harbor"
        component: core
      annotations:
        checksum/configmap: cef1ba92fc4f0c9305975cea3fb4b22de60283ba3f390affee11f756afdec266
        checksum/secret: 797b6428f0a70a2013015055855ce032e0338e54093ae8c4d4c302dfdecccfae
        checksum/secret-jobservice: 26d5e6ac0bd8823d36d94fbc023ba9385241e9ecfa34965e3bb31dafcc28e0d9
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: core
        image: goharbor/harbor-core:v2.0.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "harbor-core"
        - secretRef:
            name: "harbor-core"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "harbor-jobservice"
                key: JOBSERVICE_SECRET
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/core/app.conf
          subPath: app.conf
        - name: secret-key
          mountPath: /etc/core/key
          subPath: key
        - name: token-service-private-key
          mountPath: /etc/core/private_key.pem
          subPath: tls.key
        - name: ca-download
          mountPath: /etc/core/ca
        - name: psc
          mountPath: /etc/core/token
      volumes:
      - name: config
        configMap:
          name: harbor-core
          items:
            - key: app.conf
              path: app.conf
      - name: secret-key
        secret:
          secretName: harbor-core
          items:
            - key: secretKey
              path: key
      - name: token-service-private-key
        secret:
          secretName: harbor-core
      - name: ca-download
        secret:
          secretName: "harbor-ingress"
      - name: psc
        emptyDir: {}
---
# Source: harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: jobservice
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: jobservice
      annotations:
        checksum/configmap: a26cd3a79e8a98957b5641dc3f73f779c0fde10b5ece7ed43b555a254e49bcea
        checksum/configmap-env: 004b4d029da2fbfcca0601f335004553b6f636436e5910dfb801b7dae587328d
        checksum/secret: 73957b04f6505b36597290ca608fab36542a4982e7f4905c28a0b09c8273b061
        checksum/secret-core: 0b5271bd1426951250e4c02f7531965cbd72e2433e6607a19914c38db43fb5e1
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: jobservice
        image: goharbor/harbor-jobservice:v2.0.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-core
                key: secret
        envFrom:
        - configMapRef:
            name: "harbor-jobservice-env"
        - secretRef:
            name: "harbor-jobservice"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: jobservice-config
          mountPath: /etc/jobservice/config.yml
          subPath: config.yml
        - name: job-logs
          mountPath: /var/log/jobs
          subPath:
      volumes:
      - name: jobservice-config
        configMap:
          name: "harbor-jobservice"
      - name: job-logs
        persistentVolumeClaim:
          claimName: harbor-jobservice
---
# Source: harbor/templates/notary/notary-server.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-notary-server
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: notary-server
spec:
  replicas: 1
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: notary-server
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: notary-server
      annotations:
        checksum/secret: 6bfec0953bba6070eb0b14df3b0e71fc168d5ae407b5ae3d6324fce7033aa874
        checksum/secret-core: 2cd83b52cb66c2dc300d3405f0ddce7c5f00a133f1fc88437fa8e723deddc4df
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: notary-server
        image: goharbor/notary-server-photon:v2.0.2
        imagePullPolicy: IfNotPresent
        env:
        - name: MIGRATIONS_PATH
          value: migrations/server/postgresql
        - name: DB_URL
          value: postgres://postgres:changeit@harbor-database:5432/notaryserver?sslmode=disable
        volumeMounts:
        - name: config
          mountPath: /etc/notary/server-config.postgres.json
          subPath: server.json
        - name: token-service-certificate
          mountPath: /root.crt
          subPath: tls.crt
        - name: signer-certificate
          mountPath: /etc/ssl/notary/ca.crt
          subPath: ca.crt
      volumes:
      - name: config
        secret:
          secretName: "harbor-notary-server"
      - name: token-service-certificate
        secret:
          secretName: harbor-core
      - name: signer-certificate
        secret:
          secretName: harbor-notary-server
---
# Source: harbor/templates/notary/notary-signer.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-notary-signer
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: notary-signer
spec:
  replicas: 1
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: notary-signer
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: notary-signer
      annotations:
        checksum/secret: 19916404c09d59a4172837dc51f16a5f67c392f2a9cf5fa0c27cd83d05aa8357
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: notary-signer
        image: goharbor/notary-signer-photon:v2.0.2
        imagePullPolicy: IfNotPresent
        env:
        - name: MIGRATIONS_PATH
          value: migrations/signer/postgresql
        - name: DB_URL
          value: postgres://postgres:changeit@harbor-database:5432/notarysigner?sslmode=disable
        - name: NOTARY_SIGNER_DEFAULTALIAS
          value: defaultalias
        volumeMounts:
        - name: config
          mountPath: /etc/notary/signer-config.postgres.json
          subPath: signer.json
        - name: signer-certificate
          mountPath: /etc/ssl/notary/tls.crt
          subPath: tls.crt
        - name: signer-certificate
          mountPath: /etc/ssl/notary/tls.key
          subPath: tls.key
      volumes:
      - name: config
        secret:
          secretName: "harbor-notary-server"
      - name: signer-certificate
        secret:
          secretName: harbor-notary-server
---
# Source: harbor/templates/portal/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-portal"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: portal
spec:
  replicas: 1
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: portal
  template:
    metadata:
      labels:
        release: RELEASE-NAME
        app: "harbor"
        component: portal
      annotations:
    spec:
      containers:
      - name: portal
        image: goharbor/harbor-portal:v2.0.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: portal-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      volumes:
      - name: portal-config
        configMap:
          name: "harbor-portal"
---
# Source: harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-registry"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: registry
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: registry
      annotations:
        checksum/configmap: bff4181b53acc93e0acaeb66d1028a6a71f3dd4a302be66b6e69d9a81c35c278
        checksum/secret: 8bfd94806b5d3e80decc33ed455c826687a8a22fb1ad0b1adfa85d1beb9be286
        checksum/secret-jobservice: 4fc72a7cfa866239ab704469520748f52b023373a58b509f7c14cf6d9ff8d791
        checksum/secret-core: a0732d2661380fb31d77f6d9f6fd5531eb42e2c923aa954b78fab9732e733f0f
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: registry
        image: goharbor/registry-photon:v2.0.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "harbor-registry"
        env:
        ports:
        - containerPort: 5000
        - containerPort: 5001
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath:
        - name: registry-root-certificate
          mountPath: /etc/registry/root.crt
          subPath: tls.crt
        - name: registry-htpasswd
          mountPath: /etc/registry/passwd
          subPath: passwd
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
      - name: registryctl
        image: goharbor/harbor-registryctl:v2.0.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "harbor-registry"
        env:
        - name: CORE_SECRET
          valueFrom:
            secretKeyRef:
              name: harbor-core
              key: secret
        - name: JOBSERVICE_SECRET
          valueFrom:
            secretKeyRef:
              name: harbor-jobservice
              key: JOBSERVICE_SECRET
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath:
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
        - name: registry-config
          mountPath: /etc/registryctl/config.yml
          subPath: ctl-config.yml
      volumes:
      - name: registry-htpasswd
        secret:
          secretName: harbor-registry
          items:
            - key: REGISTRY_HTPASSWD
              path: passwd
      - name: registry-root-certificate
        secret:
          secretName: harbor-core
      - name: registry-config
        configMap:
          name: "harbor-registry"
      - name: registry-data
        persistentVolumeClaim:
          claimName: harbor-registry
---
# Source: harbor/templates/database/database-ss.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "harbor-database"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: database
spec:
  replicas: 1
  serviceName: "harbor-database"
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: database
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: database
      annotations:
        checksum/secret: 90e0d57ebc6da6126ee1a270482b27747d8dede1c6ae5c371fafa2157b82cb87
    spec:
      initContainers:
      - name: "change-permission-of-directory"
        securityContext:
          runAsUser: 0
        image: goharbor/harbor-db:v2.0.2
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "chown -R postgres:postgres /var/lib/postgresql/data"]
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath:
      - name: "remove-lost-found"
        image: goharbor/harbor-db:v2.0.2
        imagePullPolicy: IfNotPresent
        command: ["rm", "-Rf", "/var/lib/postgresql/data/lost+found"]
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath:
      containers:
      - name: database
        image: goharbor/harbor-db:v2.0.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 1
          periodSeconds: 10
        envFrom:
          - secretRef:
              name: "harbor-database"
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath:
  volumeClaimTemplates:
  - metadata:
      name: "database-data"
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/redis/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: harbor-redis
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: redis
spec:
  replicas: 1
  serviceName: harbor-redis
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: redis
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: redis
    spec:
      securityContext:
        fsGroup: 999
      initContainers:
      - name: init
        image: busybox
        args:
        - "sh"
        - "-c"
        - "chown 999:999 /var/lib/redis"
        volumeMounts:
        - name: data
          mountPath: /var/lib/redis
          subPath:
      containers:
      - name: redis
        image: goharbor/redis-photon:v2.0.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          periodSeconds: 10
        volumeMounts:
        - name: data
          mountPath: /var/lib/redis
          subPath:
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/trivy/trivy-sts.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: harbor-trivy
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: trivy
spec:
  replicas: 1
  serviceName: harbor-trivy
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: trivy
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: trivy
      annotations:
        checksum/secret: 9525b9fcc894d4ae21b70ca1fd46c573686e8fdb3a965424935da0bf49f21115
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
        - name: trivy
          image: goharbor/trivy-adapter-photon:v2.0.2
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
          env:
            - name: HTTP_PROXY
              value: ""
            - name: HTTPS_PROXY
              value: ""
            - name: NO_PROXY
              value: "harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-clair,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,harbor-trivy,127.0.0.1,localhost,.local,.internal"
            - name: "SCANNER_LOG_LEVEL"
              value: "info"
            - name: "SCANNER_TRIVY_CACHE_DIR"
              value: "/home/scanner/.cache/trivy"
            - name: "SCANNER_TRIVY_REPORTS_DIR"
              value: "/home/scanner/.cache/reports"
            - name: "SCANNER_TRIVY_DEBUG_MODE"
              value: "false"
            - name: "SCANNER_TRIVY_VULN_TYPE"
              value: "os,library"
            - name: "SCANNER_TRIVY_GITHUB_TOKEN"
              valueFrom:
                secretKeyRef:
                  name: harbor-trivy
                  key: gitHubToken
            - name: "SCANNER_TRIVY_SEVERITY"
              value: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
            - name: "SCANNER_TRIVY_IGNORE_UNFIXED"
              value: "false"
            - name: "SCANNER_TRIVY_SKIP_UPDATE"
              value: "false"
            - name: "SCANNER_TRIVY_INSECURE"
              value: "false"
            - name: SCANNER_API_SERVER_ADDR
              value: ":8080"
            - name: "SCANNER_STORE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: harbor-trivy
                  key: redisURL
            - name: "SCANNER_JOB_QUEUE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: harbor-trivy
                  key: redisURL
          ports:
            - name: api-server
              containerPort: 8080
          volumeMounts:
          - name: data
            mountPath: /home/scanner/.cache
            subPath:
            readOnly: false
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/healthy
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/ready
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 512Mi
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "5Gi"
