#!/usr/bin/env bash

KUBECTL_URL="https://storage.googleapis.com/kubernetes-release/release"
KUBERNETES_VERSION=1.11.2
MINIKUBE_VERSION=0.28.1

################################################################################

if ! [ -f lnmp-k8s ];then if ! [ -z "$LNMP_PATH" ];then cd $LNMP_PATH/kubernetes; else exit; fi; fi

set -e

os=`uname -s`

print_help_info(){
  echo "
Usage: lnmp-k8s COMMAND

Commands:
  kubectl-install    Install kubectl
  kubectl-getinfo    Get kubectl latest version info

  minikube-install   Install minikube
  minikube           Start minikube

  single-install     Install Local Kubernetes（Manager by systemd）

  create             Deploy lnmp on k8s
  delete             Stop lnmp on k8s, keep data resource(pv and pvc)
  cleanup            Stop lnmp on k8s, and remove all resource(pv and pvc)

  registry           Up Registry

  create-pv          Create PV and PVC

  dashboard          How to open Dashboard
"
}

_delete(){
  kubectl delete deployment -l app=lnmp
  kubectl delete service -l app=lnmp
  kubectl delete secret -l app=lnmp
  kubectl delete configmap -l app=lnmp

  kubectl delete cronjob -l app=lnmp
}

_minikube(){
  if [ `uname -s` = 'Darwin' ];then
    minikube start \
      -v 10 \
      --registry-mirror=https://registry.docker-cn.com \
      --vm-driver="hyperkit" \
      --memory=4096
  else
    minikube start \
      -v 10 \
      --registry-mirror=https://registry.docker-cn.com \
      --vm-driver="none"
  fi
}

_minikube-install(){
  if [ $os = 'Linux' ];then
    url=http://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v${MINIKUBE_VERSION}/minikube-linux-amd64
  elif [ $os = 'Darwin' ];then
    url=http://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v${MINIKUBE_VERSION}/minikube-darwin-amd64
  fi

  curl -L $url -o minikube

  chmod +x minikube

  echo "
  move minikube to your PATH"
}

_cleanup(){
  _delete
  kubectl delete pvc -l app=lnmp
  kubectl delete pv -l app=lnmp
  kubectl delete ingress -l app=lnmp
}

_create_pv(){
  if [ "$os" = 'Linux' ];then
    # sed "s#/home/username#$HOME#g" deployment/lnmp-volume.linux.example.yaml \
    # | kubectl create -f -
    kubectl create -f deployment/lnmp-volume.linux.nfs.yaml
    kubectl create -f deployment/lnmp-pvc.linux.nfs.yaml
  elif [ "$os" = 'Darwin' ];then
    sed "s#/Users/username#$HOME#g" deployment/lnmp-volume.macos.example.yaml \
    | kubectl create -f -

    kubectl create -f deployment/lnmp-pvc.yaml
  fi
}

_registry(){
  kubectl create configmap lnmp-registry-conf-0.0.1 --from-file=config.yml=../config/registry/config.gcr.io.yml
  kubectl label configmap lnmp-registry-conf-0.0.1 app=lnmp version=0.0.1

  kubectl create secret generic lnmp-registry-tls-0.0.1 --from-file=../config/registry/gcr.io.crt \
      --from-file=../config/registry/gcr.io.key
  kubectl label secret lnmp-registry-tls-0.0.1 app=lnmp version=0.0.1

  kubectl create -f coreos/addons/registry.yaml
}

_create(){
  current_context=`kubectl config current-context`

  if [ $current_context = "docker-for-desktop" -a $os = 'Darwin' ];then
     echo "This Script Support Docker for Desktop Only"
     exit
  fi

  _create_pv

  kubectl create configmap lnmp-php-conf-0.0.1 \
    --from-file=php.ini=../config/php/php.development.ini \
    --from-file=../config/php/docker-xdebug.ini \
    --from-file=../config/php/zz-docker.production.conf \
    --from-file=composer.config.json=../config/composer/config.json
  kubectl label configmap lnmp-php-conf-0.0.1 app=lnmp version=0.0.1

  kubectl create configmap lnmp-mysql-cnf-0.0.1 \
   --from-file=../config/mysql/docker.production.cnf
  kubectl label configmap lnmp-mysql-cnf-0.0.1 app=lnmp version=0.0.1

  kubectl create configmap lnmp-nginx-conf-0.0.1 \
   --from-file=../config/etc/nginx/nginx.conf
  kubectl label configmap lnmp-nginx-conf-0.0.1 app=lnmp version=0.0.1

  kubectl create configmap lnmp-nginx-conf-d-0.0.1 --from-file=deployment/configMap/nginx-conf-d
  kubectl label configmap lnmp-nginx-conf-d-0.0.1 app=lnmp version=0.0.1

  kubectl create -f deployment/lnmp-configMap.yaml

  kubectl create -f deployment/lnmp-secret.yaml

  kubectl create -f deployment/lnmp-mysql.yaml

  kubectl create -f deployment/lnmp-redis.yaml

  kubectl create -f deployment/lnmp-php7.yaml

  if [ "$os" = 'Linux' ];then
    kubectl create -f deployment/lnmp-nginx.service.linux.yaml
  elif [ "$os" = 'Darwin' ];then
    kubectl create -f deployment/lnmp-nginx.service.yaml
  fi

  kubectl create -f deployment/lnmp-nginx.yaml
}

kubectl-install(){
  if [ $os = 'Linux' ];then
    command -v docker
    if [ $? -eq 0 ];then
      docker container rm -f khs1994-kubectl || echo > /dev/null
      docker container create --name=khs1994-kubectl khs1994/coreos:cert
      docker container cp khs1994-kubectl:/usr/local/bin/kubectl .
      docker container rm -f khs1994-kubectl
      sudo mv kubectl /usr/local/bin
      kubectl version
      return
    fi
  fi

  KUBECTL_VERSION=$(curl https://storage.googleapis.com/kubernetes-release/release/stable.txt)

  if [ $OS = 'Linux' ];then
    curl -L ${KUBECTL_URL}/${KUBECTL_VERSION}/bin/linux/amd64/kubectl > kubectl-Linux-x86_64
    sudo mv kubectl-* /usr/local/bin/
  elif [ $OS = 'Darwin' ];then
    curl -L ${KUBECTL_URL}/${KUBECTL_VERSION}/bin/darwin/amd64/kubectl > kubectl-Darwin-x86_64
    sudo mv kubectl-* /usr/local/bin/
  fi

  kubectl version
}

kubectl-getinfo(){
  echo "kubectl latest version is
  "
  curl https://storage.googleapis.com/kubernetes-release/release/stable.txt
}

_etcd(){
  if ! [ -f /opt/bin/etcd ];then
      cd /opt/bin
      sudo wget https://github.com/etcd-io/etcd/releases/download/v3.3.9/etcd-v3.3.9-linux-amd64.tar.gz
      sudo tar -zxvf etcd-v3.3.9-linux-amd64.tar.gz
      sudo mv etcd-v3.3.9-linux-amd64/etcd* ../
      sduo rm -rf *.tar.gz
      cd -
      return
  fi

  echo "flanneld already install"
}

_flanneld(){
  if ! [ -f /opt/bin/flanneld ];then
    sudo curl -fsSL https://github.com/coreos/flannel/releases/download/v0.10.0/flanneld-amd64 -o /opt/bin/flanneld
    return
  fi

  echo "etcd already install"
}

_k8s_install(){
  _etcd
  _flanneld

  if ! [ -f systemd/certs/admin-key.pem ];then echo "Please Generate certs first $ cd coreos ; docker-compose up cfssl-single"; exit; fi

  sudo mkdir -p /opt/bin

  if ! [ -f /opt/bin/kubeadm ];then
    sudo cp coreos/kubernetes-release/release/v${KUBERNETES_VERSION}/kubernetes/server/bin/* /opt/bin/
  fi

  sudo cp coreos/disk/bin/*.sh /opt/bin/

  sudo chmod +x /opt/bin/*

  sudo mkdir -p /etc/kubernetes/certs

  sudo cp systemd/*.service /etc/systemd/system/
  sudo cp systemd/certs/*.pem /etc/kubernetes/certs/

  sudo cp systemd/certs/*.kubeconfig /etc/kubernetes/

  sudo cp systemd/kubelet.config.json systemd/kube-proxy.config.yaml /etc/kubernetes/
  sudo cp coreos/disk/system/csr-crb.yaml /etc/kubernetes/

  source systemd/.env.example

  cat | sudo tee /etc/kubernetes/encryption-config.yaml <<EOF
kind: EncryptionConfig
apiVersion: v1
resources:
  - resources:
      - secrets
    providers:
      - aescbc:
          keys:
            - name: key1
              secret: ${ENCRYPTION_KEY}
      - identity: {}
EOF

  sudo mkdir -p /etc/systemd/system/docker.service.d

  sudo cp systemd/docker.conf /etc/systemd/system/docker.service.d/

  sudo systemctl daemon-reload

  sudo useradd -m -s /bin/bash -G root k8s || echo

  # sudo rm -rf /var/log/kubernetes /var/log/kube-apiserver-audit.log

  sudo mkdir --parents /var/log/kubernetes

  sudo chown k8s:root /var/log/kubernetes

  sudo touch /var/log/kube-apiserver-audit.log
  sudo chown k8s:root /var/log/kube-apiserver-audit.log

  sudo mkdir -p /home/k8s/.kube
  sudo cp systemd/certs/kubectl.kubeconfig /home/k8s/.kube/config

}

_k8s_start(){
  sudo systemctl start kube-apiserver kube-controller-manager kube-scheduler \
                       kube-proxy kubelet
}

if [ -z "$1" ];then
  print_help_info
  exit
fi

case $1 in
    kubectl-install )
      kubectl-install
    ;;
    kubectl-getinfo )
      kubectl-getinfo
    ;;

    create )
      _create
    ;;

    delete )
      set +e
      _delete
    ;;

    cleanup )
      set +e
      _cleanup
    ;;

    registry )
      set +e
      _create_pv
      _registry
    ;;

    create-pv )
      _create_pv
    ;;

    single-install )
      _k8s_install
    ;;

    minikube )
      _minikube
    ;;

    minikube-install )
      _minikube-install
    ;;

    dashboard )
      echo "
$ kubectl proxy

open http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/

"
    ;;
esac
