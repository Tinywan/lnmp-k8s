#!/usr/bin/env bash

KUBECTL_URL="https://storage.googleapis.com/kubernetes-release/release"

set -e

os=`uname -s`

print_help_info(){
  echo "

Usage: lnmp-k8s COMMAND

Commands:
  kubectl-install    Install kubectl
  kubectl-getinfo    Get kubectl latest version info

  minikube-install   Install minikube
  minikube           Start minikube

  create             Deploy lnmp on k8s
  delete             Stop lnmp on k8s, keep data resource(pv and pvc)
  cleanup            Stop lnmp on k8s, and remove all resource(pv and pvc)

  dashboard          How to open Dashboard
"
}

################################################################################

MINIKUBE_VERSION=0.27.0

################################################################################

_delete(){
  kubectl delete deployment -l app=lnmp
  kubectl delete service -l app=lnmp
  kubectl delete secret -l app=lnmp
  kubectl delete configmap -l app=lnmp
  kubectl delete configMap lnmp-php-conf \
                           lnmp-nginx-conf \
                           lnmp-mysql-cnf

  kubectl delete cronjob -l app=lnmp
}

_minikube(){
  if [ `uname -s` = 'Darwin' ];then
    minikube start \
      -v 10 \
      --registry-mirror=https://registry.docker-cn.com \
      --vm-driver="hyperkit" \
      --memory=4096
  else
    minikube start \
      -v 10 \
      --registry-mirror=https://registry.docker-cn.com \
      --vm-driver="none"
  fi
}

_minikube-install(){
  if [ $os = 'Linux' ];then
    url=http://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v${MINIKUBE_VERSION}/minikube-linux-amd64
  elif [ $os = 'Darwin' ];then
    url=http://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v${MINIKUBE_VERSION}/minikube-darwin-amd64
  fi

  curl -L $url -o minikube

  chmod +x minikube

  echo "
  move minikube to your PATH"
}

_cleanup(){
  _delete
  kubectl delete pvc -l app=lnmp
  kubectl delete pv -l app=lnmp
}

_create(){
  if [ "$os" = 'Linux' ];then
    cat deployment/lnmp-volume.linux.yaml | kubectl create -f -
  elif [ "$os" = 'Darwin' ];then
    sed '' "s#/Users/username#$HOME#g" deployment/lnmp-volume.macos.yaml \
    | kubectl create -f -
  fi

  kubectl create configmap lnmp-php-conf \
    --from-file=php.ini=../config/php/php.development.ini \
    --from-file=../config/php/docker-xdebug.ini \
    --from-file=../config/php/zz-docker.production.conf \
    --from-file=composer.config.json=../config/composer/config.json

  kubectl create configmap lnmp-mysql-cnf \
   --from-file=../config/mysql/docker.production.cnf

  kubectl create configmap lnmp-nginx-conf \
   --from-file=../config/etc/nginx/nginx.conf

  kubectl create -f deployment/lnmp-configMap.yaml

  kubectl create -f deployment/lnmp-secret.yaml

  kubectl create -f deployment/lnmp-mysql.yaml

  kubectl create -f deployment/lnmp-redis.yaml

  kubectl create -f deployment/lnmp-php7.yaml

  kubectl create -f deployment/lnmp-nginx.yaml
}

kubectl-install(){
  if [ $os = 'Linux' ];then
    command -v docker
    if [ $? -eq 0 ];then
      docker container rm -f khs1994-kubectl || echo > /dev/null
      docker container create --name=khs1994-kubectl khs1994/coreos:cert
      docker container cp khs1994-kubectl:/usr/local/bin/kubectl .
      docker container rm -f khs1994-kubectl
      sudo mv kubectl /usr/local/bin
      kubectl version
      return
    fi
  fi

  KUBECTL_VERSION=$(curl https://storage.googleapis.com/kubernetes-release/release/stable.txt)

  if [ $OS = 'Linux' ];then
    curl -L ${KUBECTL_URL}/${KUBECTL_VERSION}/bin/linux/amd64/kubectl > kubectl-Linux-x86_64
    sudo mv kubectl-* /usr/local/bin/
  elif [ $OS = 'Darwin' ];then
    curl -L ${KUBECTL_URL}/${KUBECTL_VERSION}/bin/darwin/amd64/kubectl > kubectl-Darwin-x86_64
    sudo mv kubectl-* /usr/local/bin/
  fi

  kubectl version
}

kubectl-getinfo(){
  echo "kubectl latest version is
  "
  curl https://storage.googleapis.com/kubernetes-release/release/stable.txt
}

if [ -z "$1" ];then
  print_help_info
  exit
fi

case $1 in
    kubectl-install )
      kubectl-install
    ;;
    kubectl-getinfo )
      kubectl-getinfo
    ;;

    create )
      _create
    ;;

    delete )
      _delete
    ;;

    cleanup )
      _cleanup
    ;;

    minikube )
      _minikube
    ;;

    minikube-install )
      _minikube-install
    ;;

    dashboard )
      echo "
$ kubectl proxy

open http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/

"
    ;;
esac
