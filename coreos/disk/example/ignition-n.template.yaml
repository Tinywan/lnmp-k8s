# https://github.com/coreos/container-linux-config-transpiler/blob/master/doc/configuration.md
variant: fcos
version: 1.0.0
ignition:
  config:
    merge:
      source:
systemd:
  units:
    - name: etcd-member.service
      enabled: true
      dropins:
        - name: 30-certs.conf
          contents: |
            [Service]
            # User=k8s
            Environment="ETCD_NAME=coreos{{n}}"
            Environment="ETCD_SSL_DIR=/etc/kubernetes/certs"
    - name: flanneld.service
      dropins:
        - name: 50-network-config.conf
          contents: |
            [Service]
            Environment="ETCDCTL_API=2"
            Environment="ETCD_SSL_DIR=/etc/kubernetes/certs"
    - name: kube-apiserver.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubernetes API Server
        Documentation=https://github.com/kubernetes/kubernetes
        After=network.target
        # Requires=etcd.service

        [Service]
        # Flag --experimental-encryption-provider-config has been deprecated, use --encryption-provider-config.
        # --insecure-port has been deprecated, This flag will be removed in a future version.

        Environment="K8S_CONF_PATH=/opt/bin/k8s/conf"
        Environment="KUBE_APISERVER_HOST=192.168.199.100"
        Environment="K8S_ETCD_HOST=192.168.199.100"

        ExecStart=/opt/bin/k8s/kube-apiserver \
        --advertise-address=${KUBE_APISERVER_HOST} \
        --default-not-ready-toleration-seconds=360 \
        --default-unreachable-toleration-seconds=360 \
        --feature-gates=DynamicAuditing=true \
        --max-mutating-requests-inflight=2000 \
        --max-requests-inflight=4000 \
        --default-watch-cache-size=200 \
        --delete-collection-workers=2 \
        --encryption-provider-config=${K8S_ROOT}/encryption-config.yaml \
        --etcd-cafile=${K8S_ROOT}/certs/ca.pem \
        --etcd-certfile=${K8S_ROOT}/certs/kubernetes.pem \
        --etcd-keyfile=${K8S_ROOT}/certs/kubernetes-key.pem \
        --etcd-servers="https://${K8S_ETCD_HOST}:2379" \
        --bind-address=${KUBE_APISERVER_HOST} \
        --secure-port=6443 \
        --tls-cert-file=${K8S_ROOT}/certs/kubernetes.pem \
        --tls-private-key-file=${K8S_ROOT}/certs/kubernetes-key.pem \
        --insecure-port=0 \
        --audit-dynamic-configuration \
        --audit-log-maxage=15 \
        --audit-log-maxbackup=3 \
        --audit-log-maxsize=100 \
        --audit-log-truncate-enabled \
        --audit-log-path=/var/log/kubernetes/kube-apiserver/audit.log \
        --audit-policy-file=${K8S_ROOT}/audit-policy.yaml \
        --profiling \
        --anonymous-auth=false \
        --client-ca-file=${K8S_ROOT}/certs/ca.pem \
        --enable-bootstrap-token-auth \
        --requestheader-allowed-names="aggregator" \
        --requestheader-client-ca-file=${K8S_ROOT}/certs/ca.pem \
        --requestheader-extra-headers-prefix="X-Remote-Extra-" \
        --requestheader-group-headers=X-Remote-Group \
        --requestheader-username-headers=X-Remote-User \
        --service-account-key-file=${K8S_ROOT}/certs/ca.pem \
        --authorization-mode=Node,RBAC \
        --runtime-config=api/all=true \
        --enable-admission-plugins=NodeRestriction \
        --allow-privileged=true \
        --apiserver-count=1 \
        --event-ttl=168h \
        --kubelet-certificate-authority=${K8S_ROOT}/certs/ca.pem \
        --kubelet-client-certificate=${K8S_ROOT}/certs/kubernetes.pem \
        --kubelet-client-key=${K8S_ROOT}/certs/kubernetes-key.pem \
        --kubelet-https=true \
        --kubelet-timeout=10s \
        --proxy-client-cert-file=${K8S_ROOT}/certs/proxy-client.pem \
        --proxy-client-key-file=${K8S_ROOT}/certs/proxy-client-key.pem \
        --service-cluster-ip-range=10.254.0.0/16 \
        --service-node-port-range="1-65535" \
        --logtostderr=true \
        --v=2

        Restart=on-failure
        RestartSec=5
        Type=notify
        LimitNOFILE=65536
        TimeoutStartSec=0

        [Install]
        WantedBy=multi-user.target
    - name: kube-controller-manager.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubernetes Controller Manager
        Documentation=https://github.com/kubernetes/kubernetes
        # Requires=kube-apiserver.service

        [Service]

        # Flag --port has been deprecated, see --secure-port instead.
        # Flag --horizontal-pod-autoscaler-use-rest-clients has been deprecated,
        # Heapster is no longer supported as a source for Horizontal Pod Autoscaler metrics.

        Environment="K8S_CONF_PATH=/opt/bin/k8s/conf"
        Environment="K8S_CM_HOST=192.168.199.100"

        ExecStart=/opt/bin/k8s/kube-controller-manager \
        --profiling \
        --cluster-name=kubernetes \
        --controllers=*,bootstrapsigner,tokencleaner \
        --kube-api-qps=1000 \
        --kube-api-burst=2000 \
        --leader-elect \
        --use-service-account-credentials \
        --concurrent-service-syncs=2 \
        --bind-address=${K8S_CM_HOST} \
        --secure-port=10257 \
        --tls-cert-file=${K8S_ROOT}/certs/kube-controller-manager.pem \
        --tls-private-key-file=${K8S_ROOT}/certs/kube-controller-manager-key.pem \
        --port=0 \
        --authentication-kubeconfig=${K8S_ROOT}/kube-controller-manager.kubeconfig \
        --client-ca-file=${K8S_ROOT}/certs/ca.pem \
        --requestheader-allowed-names="" \
        --requestheader-client-ca-file=${K8S_ROOT}/certs/ca.pem \
        --requestheader-extra-headers-prefix="X-Remote-Extra-" \
        --requestheader-group-headers=X-Remote-Group \
        --requestheader-username-headers=X-Remote-User \
        --authorization-kubeconfig=${K8S_ROOT}/kube-controller-manager.kubeconfig \
        --cluster-signing-cert-file=${K8S_ROOT}/certs/ca.pem \
        --cluster-signing-key-file=${K8S_ROOT}/certs/ca-key.pem \
        --experimental-cluster-signing-duration=876000h \
        --horizontal-pod-autoscaler-sync-period=10s \
        --concurrent-deployment-syncs=10 \
        --concurrent-gc-syncs=30 \
        --node-cidr-mask-size=24 \
        --service-cluster-ip-range=10.254.0.0/16 \
        --pod-eviction-timeout=6m \
        --terminated-pod-gc-threshold=10000 \
        --root-ca-file=${K8S_ROOT}/certs/ca.pem \
        --service-account-private-key-file=${K8S_ROOT}/certs/ca-key.pem \
        --kubeconfig=${K8S_ROOT}/kube-controller-manager.kubeconfig \
        --logtostderr=true \
        --v=2

        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
    - name: kube-scheduler.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubernetes Scheduler
        Documentation=https://github.com/kubernetes/kubernetes
        # Requires=kube-apiserver.service

        [Service]

        Environment="K8S_CONF_PATH=/opt/bin/k8s/conf"
        Environment="K8S_S_HOST=192.168.199.100"

        ExecStart=/opt/bin/k8s/kube-scheduler \
        --config=${K8S_ROOT}/kube-scheduler.yaml \
        --bind-address=${K8S_S_HOST} \
        --secure-port=10259 \
        --port=0 \
        --tls-cert-file=${K8S_ROOT}/certs/kube-scheduler.pem \
        --tls-private-key-file=${K8S_ROOT}/certs/kube-scheduler-key.pem \
        --authentication-kubeconfig=${K8S_ROOT}/kube-scheduler.kubeconfig \
        --client-ca-file=${K8S_ROOT}/certs/ca.pem \
        --requestheader-allowed-names="" \
        --requestheader-client-ca-file=${K8S_ROOT}/certs/ca.pem \
        --requestheader-extra-headers-prefix="X-Remote-Extra-" \
        --requestheader-group-headers=X-Remote-Group \
        --requestheader-username-headers=X-Remote-User \
        --authorization-kubeconfig=${K8S_ROOT}/kube-scheduler.kubeconfig \
        --logtostderr=true \
        --v=2

        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
    - name: docker-tls-tcp.socket
      enabled: true
      contents: |
        [Unit]
        Description=Docker Secured Socket for the API

        [Socket]
        # ListenStream=IP_{{n}}:2376
        ListenStream=2376
        BindIPv6Only=both
        Service=docker.service

        [Install]
        WantedBy=sockets.target
    - name: kube-proxy.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubernetes Kube-Proxy Server
        Documentation=https://github.com/kubernetes/kubernetes
        After=network.target

        [Service]

        ExecStartPre=-/usr/bin/env mkdir -p /var/lib/kube-proxy
        ExecStartPre=-/usr/sbin/modprobe ip_vs
        ExecStartPre=-/sbin/modprobe ip_vs

        # WorkingDirectory=/var/lib/kube-proxy

        Environment="K8S_CONF_PATH=/opt/bin/k8s/conf"

        ExecStart=/opt/bin/k8s/kube-proxy \
        --config=${K8S_ROOT}/kube-proxy.config.yaml \
        --logtostderr=true \
        --v=2

        Restart=on-failure
        RestartSec=5
        LimitNOFILE=65536

        [Install]
        WantedBy=multi-user.target
    - name: kubelet.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubernetes Kubelet
        Documentation=https://github.com/kubernetes/kubernetes
        # After=docker.service
        # Requires=docker.service

        [Service]
        ExecStartPre=-/usr/sbin/swapoff -a
        ExecStartPre=-/sbin/swapoff -a
        ExecStartPre=-/opt/bin/k8s/generate-kubelet-bootstrap-kubeconfig.sh
        ExecStartPre=-/usr/bin/env mkdir -p /var/lib/kubelet

        # WorkingDirectory=/var/lib/kubelet
        Environment="NODE_NAME=coreos{{n}}"
        # Fix me
        Environment="KUBE_APISERVER=https://192.168.199.100:6443"

        Environment="K8S_CONF_PATH=/opt/bin/k8s/conf"

        ExecStart=/opt/bin/k8s/kubelet \
        --bootstrap-kubeconfig=${K8S_ROOT}/kubelet-bootstrap.kubeconfig \
        --cert-dir=${K8S_ROOT}/certs \
        --container-runtime=docker \
        --container-runtime-endpoint=unix:///var/run/dockershim.sock \
        --root-dir=/var/lib/kubelet \
        --kubeconfig=${K8S_ROOT}/kubelet.kubeconfig \
        --config=${K8S_ROOT}/kubelet-config.yaml \
        --hostname-override=${NODE_NAME} \
        --pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 \
        --image-pull-progress-deadline=15m \
        --volume-plugin-dir=/var/lib/kubelet/kubelet-plugins/volume/exec/ \
        --logtostderr=true \
        --v=2

        # --container-runtime=remote \
        # --container-runtime-endpoint=unix:///run/containerd/containerd.sock \

        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
storage:
  files:
    - path:       "/etc/hostname"
      filesystem: "root"
      mode:       0644
      contents:
        inline: coreos{{n}}
    - path:       "/etc/hosts"
      filesystem: "root"
      mode:       0644
      contents:
        inline: |
          127.0.0.1 localhost
          ::1       localhost
          127.0.0.1 example.com
          {{IP_1}} gcr.io k8s.gcr.io docker.khs1994.com docker.domain.com
          {{IP_1}} coreos1
          {{IP_2}} coreos2
          {{IP_3}} coreos3
          IP_{{n}} coreos{{n}}
    - path: /etc/kubernetes/kubelet.config.json
      mode: 0644
      contents:
        inline: |
          {
            "kind": "KubeletConfiguration",
            "apiVersion": "kubelet.config.k8s.io/v1beta1",
            "authentication": {
              "x509": {
                "clientCAFile": "/etc/kubernetes/certs/ca.pem"
              },
              "webhook": {
                "enabled": true,
                "cacheTTL": "2m0s"
               },
              "anonymous": {
                "enabled": false
              }
            },
              "authorization": {
                "mode": "Webhook",
                "webhook": {
               "cacheAuthorizedTTL": "5m0s",
               "cacheUnauthorizedTTL": "30s"
              }
            },
            "address": "IP_{{n}}",
            "port": 10250,
            "readOnlyPort": 10255,
            "cgroupDriver": "cgroupfs",
            "hairpinMode": "promiscuous-bridge",
            "serializeImagePulls": false,
            "rotateCertificates": true,
            "serverTLSBootstrap": true,
            "maxPods": 2000,
            "featureGates": {
              "RotateKubeletClientCertificate": true,
              "RotateKubeletServerCertificate": true
            },
            "clusterDomain": "${CLUSTER_DNS_DOMAIN}",
            "clusterDNS": ["${CLUSTER_DNS_SVC_IP}"]
          }
    - path: /etc/kubernetes/kube-proxy.config.yaml
      mode: 0644
      contents:
        inline: |
          apiVersion: kubeproxy.config.k8s.io/v1alpha1
          kind: KubeProxyConfiguration
          bindAddress: IP_{{n}}
          clientConnection:
            kubeconfig: /etc/kubernetes/kube-proxy.kubeconfig
          clusterCIDR: ${CLUSTER_CIDR}
          healthzBindAddress: IP_{{n}}:10256
          hostnameOverride: coreos{{n}}
          metricsBindAddress: IP_{{n}}:10249
          mode: "ipvs"
