# https://github.com/coreos/container-linux-config-transpiler/blob/master/doc/configuration.md
passwd:
  users:
    - name: core
      # password_hash: "$6$43y3tkl..."
      # https://github.com/coreos/container-linux-config-transpiler/blob/master/doc/examples.md#generating-a-password-hash
      ssh_authorized_keys:
        - ssh-rsa SSH_PUB
      groups:
        - wheel
        - sudo
        - docker
    - name: k8s
      ssh_authorized_keys:
        - ssh-rsa SSH_PUB
      groups:
        - wheel
        - sudo
        - docker
      home_dir: /home/k8s
update:
  group:  "alpha"
locksmith:
  reboot_strategy: "etcd-lock" #  reboot, etcd-lock, off
  window_start:    "Sun 1:00"
  window_length:   "2h"
  # group:
  etcd_endpoints: ${ETCD_ENDPOINTS}
  etcd_cafile: /etc/kubernetes/certs/ca.pem
  etcd_certfile: /etc/kubernetes/certs/flanneld.pem
  etcd_keyfile: /etc/kubernetes/certs/flanneld-key.pem
flannel:
  etcd_cafile: /etc/kubernetes/certs/ca.pem
  etcd_certfile: /etc/kubernetes/certs/flanneld.pem
  etcd_keyfile: /etc/kubernetes/certs/flanneld-key.pem
  etcd_endpoints: ${ETCD_ENDPOINTS}
  etcd_prefix: ${FLANNELD_ETCD_PREFIX}
  network_config: '{"Network":"${CLUSTER_CIDR}", "SubnetLen": 24, "Backend": {"Type": "vxlan"}}'
etcd:
  # https://github.com/coreos/etcd/blob/master/Documentation/platforms/container-linux-systemd.md#etcd-3x-service
  version:                     3.3.8
  name:                        coreos{{n}}
  # discovery: https://DISCOVERY_URL
  initial_cluster:             ${ETCD_NODES}
  initial_advertise_peer_urls: https://IP_{{n}}:2380
  advertise_client_urls:       https://IP_{{n}}:2379
  listen_client_urls:          https://0.0.0.0:2379
  listen_peer_urls:            https://IP_{{n}}:2380
  cert_file: /etc/ssl/certs/etcd.pem
  key_file: /etc/ssl/certs/etcd-key.pem
  trusted_ca_file: /etc/ssl/certs/ca.pem
  peer_cert_file: /etc/ssl/certs/etcd.pem
  peer_key_file: /etc/ssl/certs/etcd-key.pem
  peer_trusted_ca_file: /etc/ssl/certs/ca.pem
  client_cert_auth:            true
  peer_client_cert_auth:       true
  initial_cluster_token:       ${ETCD_TOKEN}
  initial_cluster_state:       new
systemd:
  units:
    - name: flanneld.service
      dropins:
        - name: 50-network-config.conf
          contents: |
            [Service]
            Environment="ETCDCTL_API=2"
            Environment="ETCD_SSL_DIR=/etc/kubernetes/certs"
    - name: etcd-member.service
      enabled: true
      dropins:
        - name: 30-certs.conf
          contents: |
            [Service]
            # User=k8s
            Environment="ETCD_NAME=coreos{{n}}"
            Environment="ETCD_SSL_DIR=/etc/kubernetes/certs"
    - name: settimezone.service
      enabled: true
      contents: |
        [Unit]
        Description=Set the time zone

        [Service]
        ExecStart=/usr/bin/timedatectl set-timezone PRC

        [Install]
        WantedBy=multi-user.target
    - name: docker-tls-tcp.socket
      enabled: true
      contents: |
        [Unit]
        Description=Docker Secured Socket for the API

        [Socket]
        # ListenStream=IP_{{n}}:2376
        ListenStream=2376
        BindIPv6Only=both
        Service=docker.service

        [Install]
        WantedBy=sockets.target
    - name: kube-proxy.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubernetes Kube-Proxy Server
        Documentation=https://github.com/kubernetes/kubernetes
        After=network.target

        [Service]
        WorkingDirectory=/var/lib/kube-proxy
        ExecStart=/opt/bin/kube-proxy \
        --config=/etc/kubernetes/kube-proxy.config.yaml \
        --alsologtostderr=true \
        --logtostderr=false \
        --log-dir=/var/log/kubernetes \
        --v=2
        Restart=on-failure
        RestartSec=5
        LimitNOFILE=65536

        [Install]
        WantedBy=multi-user.target
    - name: kubelet.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubernetes Kubelet
        Documentation=https://github.com/kubernetes/kubernetes
        After=docker.service
        Requires=docker.service

        [Service]
        WorkingDirectory=/var/lib/kubelet
        Environment="NODE_NAME=coreos{{n}}"
        Environment="KUBE_APISERVER=${KUBE_APISERVER}"
        ExecStart=/opt/bin/kubelet \
        --bootstrap-kubeconfig=/etc/kubernetes/kubelet-bootstrap.kubeconfig \
        --cert-dir=/etc/kubernetes/certs \
        --kubeconfig=/etc/kubernetes/kubelet.kubeconfig \
        --config=/etc/kubernetes/kubelet.config.json \
        --hostname-override=coreos{{n}} \
        --pod-infra-container-image=registry.access.redhat.com/rhel7/pod-infrastructure:latest \
        --alsologtostderr=true \
        --logtostderr=false \
        --log-dir=/var/log/kubernetes \
        --v=2
        ExecStartPre=/opt/bin/generate-kubelet-bootstrap-kubeconfig.sh
        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
    - name: kube-controller-manager.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubernetes Controller Manager
        Documentation=https://github.com/kubernetes/kubernetes

        [Service]
        ExecStart=/opt/bin/kube-controller-manager \
        --port=0 \
        --secure-port=10257 \
        --bind-address=127.0.0.1 \
        --kubeconfig=/etc/kubernetes/kube-controller-manager.kubeconfig \
        --service-cluster-ip-range=${SERVICE_CIDR} \
        --cluster-name=kubernetes \
        --cluster-signing-cert-file=/etc/kubernetes/certs/ca.pem \
        --cluster-signing-key-file=/etc/kubernetes/certs/ca-key.pem \
        --experimental-cluster-signing-duration=8760h \
        --root-ca-file=/etc/kubernetes/certs/ca.pem \
        --service-account-private-key-file=/etc/kubernetes/certs/ca-key.pem \
        --leader-elect=true \
        --feature-gates=RotateKubeletServerCertificate=true \
        --controllers=*,bootstrapsigner,tokencleaner \
        --horizontal-pod-autoscaler-use-rest-clients=true \
        --horizontal-pod-autoscaler-sync-period=10s \
        --tls-cert-file=/etc/kubernetes/certs/kube-controller-manager.pem \
        --tls-private-key-file=/etc/kubernetes/certs/kube-controller-manager-key.pem \
        --use-service-account-credentials=true \
        --alsologtostderr=true \
        --logtostderr=false \
        --log-dir=/var/log/kubernetes \
        --v=2
        Restart=on-failure
        RestartSec=5
        User=k8s

        [Install]
        WantedBy=multi-user.target
    - name: kube-scheduler.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubernetes Scheduler
        Documentation=https://github.com/kubernetes/kubernetes

        [Service]
        ExecStart=/opt/bin/kube-scheduler \
        --address=127.0.0.1 \
        --kubeconfig=/etc/kubernetes/kube-scheduler.kubeconfig \
        --leader-elect=true \
        --alsologtostderr=true \
        --logtostderr=false \
        --log-dir=/var/log/kubernetes \
        --v=2
        Restart=on-failure
        RestartSec=5
        # User=k8s

        [Install]
        WantedBy=multi-user.target
networkd:
   units:
     - name: 10-static.network
       contents: |
         [Match]
         Name=enp0s3

         [Network]
         Address=IP_{{n}}/24
         DHCP=no
     - name: 20-dhcp.network
       contents: |
         [Match]
         Name=enp0s8

         [Network]
         DHCP=yes
     - name: 30-static.network
       contents: |
         [Match]
         Name=eth0

         [Network]
         Address=IP_{{n}}/24
         DNS=114.114.114.114
         # Gateway=
storage:
  files:
    - path:       "/etc/hostname"
      filesystem: "root"
      mode:       0644
      contents:
        inline: coreos{{n}}
    - path:       "/etc/resolv.conf"
      filesystem: "root"
      mode:       0644
      contents:
        inline: |
          nameserver 114.114.114.114
          nameserver 8.8.8.8
    - path:       "/etc/hosts"
      filesystem: "root"
      mode:       0644
      contents:
        inline: |
          127.0.0.1 localhost
          ::1       localhost
          127.0.0.1 example.com
          IP_1 gcr.io k8s.gcr.io docker.khs1994.com docker.domain.com
          IP_1 coreos1
          IP_2 coreos2
          IP_3 coreos3
          IP_{{n}} coreos{{n}}
    - path:       "/etc/kubernetes/certs/daemon.json"
      filesystem: "root"
      mode:       0644
      contents:
        inline: |
          {
            "tlsverify": true,
            "tlscert": "/etc/kubernetes/certs/server.pem",
            "tlskey": "/etc/kubernetes/certs/server-key.pem",
            "tlscacert": "/etc/kubernetes/certs/ca.pem",
            "registry-mirrors" : [
              "https://registry.docker-cn.com"
            ],
            "debug" : true,
            "dns" : [
              "114.114.114.114",
              "8.8.8.8"
            ],
            "experimental" : true
          }
    - path: /home/k8s/.kube/config
      filesystem: root
      mode: 0644
      contents:
        remote:
          url: http://LOCAL_HOST:8080/cert/kubectl.kubeconfig
      user:
        name: k8s
      group:
        name: k8s
    - path: /home/root/.kube/config
      filesystem: root
      mode: 0644
      contents:
        remote:
          url: http://LOCAL_HOST:8080/cert/kubectl.kubeconfig
    - path: /home/core/.kube/config
      filesystem: root
      mode: 0644
      contents:
        remote:
          url: http://LOCAL_HOST:8080/cert/kubectl.kubeconfig
      user:
        name: core
      group:
        name: core
    - path: /etc/kubernetes/kubelet.config.json
      filesystem: root
      mode: 0644
      contents:
        inline: |
          {
            "kind": "KubeletConfiguration",
            "apiVersion": "kubelet.config.k8s.io/v1beta1",
            "authentication": {
              "x509": {
                "clientCAFile": "/etc/kubernetes/certs/ca.pem"
              },
              "webhook": {
                "enabled": true,
                "cacheTTL": "2m0s"
               },
              "anonymous": {
                "enabled": false
              }
            },
              "authorization": {
                "mode": "Webhook",
                "webhook": {
               "cacheAuthorizedTTL": "5m0s",
               "cacheUnauthorizedTTL": "30s"
              }
            },
            "address": "IP_{{n}}",
            "port": 10250,
            "readOnlyPort": 10255,
            "cgroupDriver": "cgroupfs",
            "hairpinMode": "promiscuous-bridge",
            "serializeImagePulls": false,
            "rotateCertificates": true,
            "serverTLSBootstrap": true,
            "maxPods": 2000,
            "featureGates": {
              "RotateKubeletClientCertificate": true,
              "RotateKubeletServerCertificate": true
            },
            "clusterDomain": "${CLUSTER_DNS_DOMAIN}",
            "clusterDNS": ["${CLUSTER_DNS_SVC_IP}"]
          }
    - path: /etc/kubernetes/kube-proxy.config.yaml
      filesystem: root
      mode: 0644
      contents:
        inline: |
          apiVersion: kubeproxy.config.k8s.io/v1alpha1
          kind: KubeProxyConfiguration
          bindAddress: IP_{{n}}
          clientConnection:
            kubeconfig: /etc/kubernetes/kube-proxy.kubeconfig
          clusterCIDR: ${CLUSTER_CIDR}
          healthzBindAddress: IP_{{n}}:10256
          hostnameOverride: coreos{{n}}
          metricsBindAddress: IP_{{n}}:10249
          mode: "ipvs"
    - path: /etc/kubernetes/kube-controller-manager.kubeconfig
      filesystem: root
      mode: 0644
      contents:
        remote:
          url: http://LOCAL_HOST:8080/cert/kube-controller-manager.kubeconfig
    - path: /etc/kubernetes/kube-scheduler.kubeconfig
      filesystem: root
      mode: 0644
      contents:
        remote:
          url: http://LOCAL_HOST:8080/cert/kube-scheduler.kubeconfig
    - path: /etc/kubernetes/kube-proxy.kubeconfig
      filesystem: root
      mode: 0644
      contents:
        remote:
          url: http://LOCAL_HOST:8080/cert/kube-proxy.kubeconfig
    - path: /etc/kubernetes/csr-crb.yaml
      filesystem: root
      mode: 0644
      contents:
        remote:
          url: http://LOCAL_HOST:8080/disk/system/csr-crb.yaml
    - path: /etc/kubernetes/certs/registry-ca.pem
      filesystem: root
      mode: 0644
      contents:
        remote:
          url: http://LOCAL_HOST:8080/cert/registry-ca.pem
    - path: /etc/kubernetes/certs/ca.pem
      filesystem: root
      mode: 0644
      contents:
        remote:
          url: http://LOCAL_HOST:8080/cert/ca.pem
    - path: /etc/kubernetes/certs/server.pem
      filesystem: root
      mode: 0644
      contents:
        remote:
          url: http://LOCAL_HOST:8080/cert/server-cert.pem
    - path: /etc/kubernetes/certs/server-key.pem
      filesystem: root
      mode: 0644
      contents:
        remote:
          url: http://LOCAL_HOST:8080/cert/server-key.pem
    - path: /etc/profile.d/profile.sh
      filesystem: root
      mode: 0755
      contents:
        inline: |
          export ETCDCTL_API=3
          export etcd_endpoints=${ETCD_ENDPOINTS}
    - path: /etc/kubernetes/certs/etcd.pem
      filesystem: root
      mode: 0644
      contents:
        remote:
          url: http://LOCAL_HOST:8080/cert/etcd.pem
    - path: /etc/kubernetes/certs/etcd-key.pem
      filesystem: root
      mode: 0644
      contents:
        remote:
          url: http://LOCAL_HOST:8080/cert/etcd-key.pem
    - path: /etc/kubernetes/certs/flanneld.pem
      filesystem: root
      mode: 0644
      contents:
        remote:
          url: http://LOCAL_HOST:8080/cert/flanneld.pem
    - path: /etc/kubernetes/certs/flanneld-key.pem
      filesystem: root
      mode: 0644
      contents:
        remote:
          url: http://LOCAL_HOST:8080/cert/flanneld-key.pem
    - path: /etc/kubernetes/certs/kube-controller-manager.pem
      filesystem: root
      mode: 0644
      contents:
        remote:
          url: http://LOCAL_HOST:8080/cert/kube-controller-manager.pem
    - path: /etc/kubernetes/certs/kube-controller-manager-key.pem
      filesystem: root
      mode: 0644
      contents:
        remote:
          url: http://LOCAL_HOST:8080/cert/kube-controller-manager-key.pem
    - path: /opt/bin/kube-proxy
      filesystem: root
      mode: 0755
      contents:
        remote:
          url: http://LOCAL_HOST:8080/kubernetes-release/release/${KUBERNETES_VERSION}/kubernetes/server/bin/kube-proxy
    - path: /opt/bin/kubelet
      filesystem: root
      mode: 0755
      contents:
        remote:
          url: http://LOCAL_HOST:8080/kubernetes-release/release/${KUBERNETES_VERSION}/kubernetes/server/bin/kubelet
    - path: /opt/bin/kubeadm
      filesystem: root
      mode: 0755
      contents:
        remote:
          url: http://LOCAL_HOST:8080/kubernetes-release/release/${KUBERNETES_VERSION}/kubernetes/server/bin/kubeadm
    - path: /opt/bin/kubectl
      filesystem: root
      mode: 0755
      contents:
        remote:
          url: http://LOCAL_HOST:8080/kubernetes-release/release/${KUBERNETES_VERSION}/kubernetes/server/bin/kubectl
    - path: /opt/bin/generate-kubelet-bootstrap-kubeconfig.sh
      filesystem: root
      mode: 0755
      contents:
        remote:
          url: http://LOCAL_HOST:8080/disk/bin/generate-kubelet-bootstrap-kubeconfig.sh
    - path: /opt/bin/kube-controller-manager
      filesystem: root
      mode: 0755
      contents:
        remote:
          url: http://LOCAL_HOST:8080/kubernetes-release/release/${KUBERNETES_VERSION}/kubernetes/server/bin/kube-controller-manager
    - path: /opt/bin/kube-scheduler
      filesystem: root
      mode: 0755
      contents:
        remote:
          url: http://LOCAL_HOST:8080/kubernetes-release/release/${KUBERNETES_VERSION}/kubernetes/server/bin/kube-scheduler
  directories:
    - path: /etc/kubernetes
      filesystem: root
      mode: 0755
      user:
        name: k8s
      group:
        name: k8s
    - path: /etc/kubernetes/certs
      filesystem: root
      mode: 0755
      user:
        name: k8s
      group:
        name: k8s
    - path: /var/lib/kube-proxy
      filesystem: root
      mode: 0755
      user:
        name: k8s
      group:
        name: k8s
    - path: /var/log/kubernetes
      filesystem: root
      mode: 0755
      user:
        name: k8s
      group:
        name: k8s
    - path: /var/lib/kubelet
      filesystem: root
      mode: 0755
      user:
        name: k8s
      group:
        name: k8s
  links:
    - path: /etc/docker/certs.d/gcr.io/ca.crt
      target: /etc/kubernetes/certs/registry-ca.pem
      hard: false
      filesystem: root
      overwrite: true
    - path: /etc/docker/certs.d/k8s.gcr.io/ca.crt
      target: /etc/kubernetes/certs/registry-ca.pem
      hard: false
      filesystem: root
      overwrite: true
    - path: /etc/docker/certs.d/docker.khs1994.com/ca.crt
      target: /etc/kubernetes/certs/registry-ca.pem
      hard: false
      filesystem: root
      overwrite: true
    - path: /etc/docker/certs.d/docker.doamin.com/ca.crt
      target: /etc/kubernetes/certs/registry-ca.pem
      hard: false
      filesystem: root
      overwrite: true
